% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/projection.R
\name{populate_flat}
\alias{populate_flat}
\title{Randomly generate scales on a flat}
\usage{
populate_flat(
  set,
  target_scale = NULL,
  target_rows = NULL,
  ineqmat = NULL,
  edo = 12,
  rounder = 10,
  magnitude = 2,
  distance = 1
)
}
\arguments{
\item{set}{Numeric vector of pitch-classes in the set}

\item{target_scale}{A numeric vector which represents a scale
on the target flat.}

\item{target_rows}{An integer vector: each integer specifies a row
of \code{ineqmat} which helps to determine the target flat. The
rows must be linearly independent.}

\item{ineqmat}{Defaults to \code{NULL}, in which case the function assumes
you want to use the standard hyperplane arrangement of MCT. But you can
enter a different matrix that contains normal vectors for any hyperplane
arrangement in the same format as the standard ineqmats.}

\item{edo}{Number of unit steps in an octave. Defaults to \code{12}.}

\item{rounder}{Numeric (expected integer), defaults to \code{10}:
number of decimal places to round to when testing for equality.}

\item{magnitude}{Numeric value specifying how many sets to return. Defaults
to \code{2}.}

\item{distance}{How far (in units of voice leading work, using the
Euclidean metric) should the sampled scales be from the input \code{set}?}
}
\value{
A matrix whose columns represent scales on the desired flat.
The matrix has n rows (where n is the number of notes in \code{set}) and
\code{n * 10^magnitude} columns.
}
\description{
Sometimes it's useful to explore a flat or a color by testing
small differences that result from different positions within the
flat. This function generates random points on the desired flat
to test, similar to \code{\link[=surround_set]{surround_set()}} but constrained to lie on
a target flat. Requires a base \code{set} that serves as an "origin"
around which the random scales are to be generated (before being
projected onto the target flat).
}
\details{
The target flat can be specified by naming the \code{target_rows} that
determine the flat (in the manner of \code{\link[=project_onto]{project_onto()}}) or by
naming a \code{target_scale} on the desired flat. Both parameters default
to \code{NULL}, in which case the function populates the flat that \code{set}
itself lies on.
}
\examples{
# Let's sample several scales on the same flat as j(dia):
major <- c(0, 2, 4, 5, 7, 9, 11)
jdia_flat_scales <- populate_flat(major, j(dia))
unique(apply(jdia_flat_scales, 2, whichsvzeroes), MARGIN=2)

# So all the scales do lie on one flat, but they may be different colors.
# Let's plot them using different characters to represent the colors.
jdia_flat_svs <- apply(apply(jdia_flat_scales, 2, signvector), 2, toString)
unique_svs <- sort(unique(jdia_flat_svs))
match_sv <- function(sv) which(unique_svs == sv)
characters_for_plotting <- sapply(jdia_flat_svs, match_sv) + 9
plot(jdia_flat_scales[2,], jdia_flat_scales[3,], pch=letters[characters_for_plotting],
  xlab = "Height of scale degree 2", ylab = "Height of scale degree 3")

# Mostly we have sampled two colors on this flat, the ones represented by the letters
# "k" and "m". But we've also got a few instances of "j" and "l" on the left and bottom
# fringes of the plot.

}
