[{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://satbq.github.io/musicMCT/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://satbq.github.io/musicMCT/articles/musicMCT.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to musicMCT","text":"goal musicMCT provide computational tools study musical scales. includes functions probably familiar music theorists pitch-class set theory vein Allen Forte’s Structure Atonal Music (1973). instance, can calculate interval-class vector diatonic scale (Forte’s set class 7-35) follows: top line block input R; bottom line output function. Ignore [1], just indicates ’re seeing beginning output. ic-vector 2 5 4 3 6 1 ’d expect. main purpose package, however, reproduce traditional pc-set theory let us explore geometry musical scales described “Modal Color Theory” (Sherrill 2025, Journal Music Theory 69/1: 1-49). article explains, seven-note scales live 6-dimensional geometry populated 1,824,229 qualitatively distinct scalar structures. ’m happy calculate ivec() hand, ’re going need computers explore complicated space! vignette introduce many main functions musicMCT serve purpose, especially relate concerns JMT article. problem ’ll discuss deep signifiance, hope toy example teach use software give sense kinds questions deeper study might get .","code":"ivec(sc(7,35)) #> [1] 2 5 4 3 6 1"},{"path":[]},{"path":"https://satbq.github.io/musicMCT/articles/musicMCT.html","id":"introducing-the-main-characters","dir":"Articles","previous_headings":"How acoustic is the “acoustic scale”?","what":"1. Introducing the main characters","title":"Introduction to musicMCT","text":"familiar object theory 20th-century music scale (C, D, E, F-sharp, G, , B-flat). fourth mode melodic minor. can verify fact defining melodic minor scale R calling sim(), package’s function finding modes scale: Note top line’s syntax, defined melodic minor scale: ’ll using lot! Pitch-classes represened numbers: C=0, C-sharp = 1, . familiar sets 12edo (12 equal divisions octave), integers. Later ’ll see ’s easy work integers k edo. values define scales don’t integers : Modal Color Theory works continuous pitch-class space. function sim() computes scalar interval matrix set (defined Tymoczko 2008), presents us modes scale columns matrix. input, melodic minor scale, first column, scale want study can read fourth column SIM: Just flex muscles R, let’s pretend ’ve forgotten interpet pitch-class integers therefore need verify numbers correspond notes (C, D, E, F-sharp, G, , B-flat). ’ll checking voice leading C major scale: Tymoczko 2007 points , key signatures essentially just voice leadings C major scale another heptachord, ’ve found voice leading raises fourth step (F) semitone lowering seventh step (B). numbers (0, 2, 4, 6, 7, 9, 10) indeed correspond scale (C, D, E, F-sharp, G, , B-flat). Now, scale sometimes called “acoustic” scale sense close seven-note chunk overtone series. task vignette use musicMCT see real similarity . Let’s agree call two scales “acoustic” “overtone” scales, respectively. overtone scale defined treating 7th 13th harmonics overtone series scale (noting 14th harmonic octave 7th). ’ll convert semitone measurements follows: Let’s find voice leading overtone scale acoustic scale, since voice leading distance offers approximate measure musical similarity (Callender, Quinn, Tymoczko 2008 argue): Intuitions voice leading distances can tricky, initially doesn’t seem like big distance two scales. average amount voice move 23 cents (quarter semitone). hand, voice leading C major C acoustic also pretty small: average distance individual voice move 29 cents (2/7 semitone). Thus, one measure, acoustic_scale good approximation c_major overtone_scale! need better tools mere voice-leading distance think scale similarity. One idea quantization, ’ll address next section. ’ll see doesn’t tell whole story either.","code":"melodic_minor <- c(0, 2, 3, 5, 7, 9, 11) sim(melodic_minor) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    0    0    0    0    0    0    0 #> [2,]    2    1    2    2    2    2    1 #> [3,]    3    3    4    4    4    3    3 #> [4,]    5    5    6    6    5    5    4 #> [5,]    7    7    8    7    7    6    6 #> [6,]    9    9    9    9    8    8    8 #> [7,]   11   10   11   10   10   10   10 sim(melodic_minor)[,4] #> [1]  0  2  4  6  7  9 10 c_major <- c(0, 2, 4, 5, 7, 9, 11) minimizeVL(c_major, sim(melodic_minor)[,4]) #> [1]  0  0  0  1  0  0 -1 overtones <- 7:13 frequency_ratios <- overtones / 7 semitone_values <- 12 * log2(frequency_ratios) overtone_scale <- sim(semitone_values)[,2] print(overtone_scale) #> [1] 0.000000 2.039100 3.863137 5.513179 7.019550 8.405277 9.688259 acoustic_scale <- sim(melodic_minor)[,4] minimizeVL(overtone_scale, acoustic_scale) #> [1]  0.00000000 -0.03910002  0.13686286  0.48682058 -0.01955001  0.59472338 #> [7]  0.31174094"},{"path":"https://satbq.github.io/musicMCT/articles/musicMCT.html","id":"a-few-supporting-characters","dir":"Articles","previous_headings":"How acoustic is the “acoustic scale”?","what":"2. A few supporting characters","title":"Introduction to musicMCT","text":"normal justification calling acoustic_scale “acoustic” ’s get simply round values overtone_scale nearest integer (12edo): Wait second, ’s even acoustic scale! two consecutive semitones (6, 7, 8) actually represents sc7-33, “whole-tone plus one” scale. ’s going !? Tymoczko (2013, 130) explains ’s really thing quantization overtone_scale. 7 different quantizations. rounding unfairly privileges C (0) note ’s guaranteed move. treat degrees scale equally, sometimes different note gets stay fixed. Let’s try . scale’s tonic starts 12edo integer, won’t change quantize scale. Transposing whole scale 1 semitone using tn(), expect get essentially quantization, just 1 added every value: find possible quantizations, need explore range transpositions scale’s tonic value 0 < x < 1. transpose overtone_scale starts every cent (.e. hundredth semitone) range, fine enough sampling encounter every quantization: ’re almost , scales start 0 1. eighth column just \\({T_1}\\) first. let’s make start zero double-check ’re truly unique: thus really get exactly seven quantizations Tymoczko predicts. seven, reason think acoustic_scale better quantization possibilities? Tymoczko proposes one perspective: 100 scales transposed_scales, many quantize seven final_quantizations? easy answer (though ’m going gloss details code gets numbers): , WT-plus-1 scale first quantized accounts 11% range quantizations, whereas two distinct modes melodic minor (sc7-34) together account 54% quantizations. first mode, acoustic_scale proper, accounts 37%–definitely lion’s share . lends credence conventional view, suggesting acoustic_scale might preferable quantization overtone_scale even isn’t quantization.","code":"round(overtone_scale, digits=0) #> [1]  0  2  4  6  7  8 10 round(overtone_scale, digits=0) #> [1]  0  2  4  6  7  8 10 round(tn(overtone_scale, 1), digits=0) #> [1]  1  3  5  7  8  9 11 amounts_to_transpose <- (0:99)/100 transposed_scales <- sapply(amounts_to_transpose, tn, set=overtone_scale) quantized_scales <- apply(transposed_scales, 2, round, digits=0) unique_quantizations <- unique(quantized_scales, MARGIN=2) print(unique_quantizations) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    0    0    0    0    1    1    1    1 #> [2,]    2    2    3    3    3    3    3    3 #> [3,]    4    4    4    4    4    5    5    5 #> [4,]    6    6    6    6    6    6    6    7 #> [5,]    7    7    7    8    8    8    8    8 #> [6,]    8    9    9    9    9    9    9    9 #> [7,]   10   10   10   10   10   10   11   11 unique_quantizations_from_0 <- apply(unique_quantizations, 2, startzero) final_quantizations <- unique(unique_quantizations_from_0, MARGIN=2) colnames(final_quantizations) <- apply(final_quantizations, 2, fortenum) print(final_quantizations) #>      7-33 7-34 7-31 7-28 7-29 7-27 7-34 #> [1,]    0    0    0    0    0    0    0 #> [2,]    2    2    3    3    2    2    2 #> [3,]    4    4    4    4    3    4    4 #> [4,]    6    6    6    6    5    5    5 #> [5,]    7    7    7    8    7    7    7 #> [6,]    8    9    9    9    8    8    8 #> [7,]   10   10   10   10    9    9   10 #> 7-33 7-34 7-31 7-28 7-29 7-27 7-34  #>   11   37    2    2   13   18   17"},{"path":"https://satbq.github.io/musicMCT/articles/musicMCT.html","id":"but-what-about-scale-structure","dir":"Articles","previous_headings":"How acoustic is the “acoustic scale”?","what":"3. But what about scale structure?","title":"Introduction to musicMCT","text":"far ’ve used computational tools musicMCT haven’t really applied concepts Modal Color Theory. ’s ’ve treating scales’ continuous voice-leading space essentially undifferentiated, whereas central argument MCT discrete regions geometry correspond qualitative differences scale structure. MCT models scale structure comparing intervals belong generic size. instance, big part character familiar major scale lies fact steps size, except \\(\\hat{3}\\)-\\(\\hat{4}\\) \\(\\hat{7}\\)-\\(\\hat{1}\\) smaller (match ). MCT breaks individual comparisons: step \\(\\hat{1}\\)-\\(\\hat{2}\\) bigger smaller step \\(\\hat{2}\\)-\\(\\hat{3}\\)? skip \\(\\hat{1}\\)-\\(\\hat{3}\\) bigger smaller skip \\(\\hat{3}\\)-\\(\\hat{5}\\)? . long exhausted potential comparisons make? comparison corresponds hyperplane geometry, musicMCT offers complete list hyperplanes matrix called ineqmat (“inequality matrix”). relevant matrix four-note scales looks like : row matrix represents different pairwise interval comparison: tetrachords, apparently need consider 8 different comparisons complete accounting scale structure. Two scales structure (belong “color”) answer 8 comparisons way. musicMCT summarizes information scale’s signvector(). instance, let’s consider set classes 4-6 (prime form 0127) 4-24 (prime form 0248). sign vectors: vectors , MCT considers tetrachords scalar structure. instance, start two identical steps (0-1-2 0-2-4) larger leap (2-7 4-8). heptachords, relevant ineqmat 42 rows, space scale structures considerably complicated. Generally wouldn’t learn lot trying read sign vectors directly–musicMCT human-readable functions help interpret –let’s take gander acoustic overtone scales: One visually apparent difference acoustic_scale many values 0 sign vector overtone_scale . fact, latter single 0: rest values 1 -1. tell us structure two scales? entry sign vector comparison two intervals scale: 1 -1 mean one interval bigger , whereas 0 means two intervals identical. instance, first 0 sign vector 0127 0248 encodes fact first step equals second step. , can see acoustic_scale considerably regular overtone_scale, sense many specific interval sizes repeat inside (like 5 whole tones dominate generic steps, 4 perfect fifths majority generic fifths). contrast scales isn’t surprising. acoustic_scale constrained twelve-tone equal temperament, many intervals possibly made . contrast, overtone_scale defined continuous pitch-class space lot variety choose . Moreover, given logarithmic relationship frequency ratios pitch intervals, successive step overtone series smaller previous, makes sense overtone_scale lot intervallic variety. anything, ’s surprising repeats intervals. can learn interval repeat putting together information signvector ineqmat heptachords. manually count entry sign vector 0, musicMCT also function : can now look row heptachordal ineqmat see interval comparison defines: tells us fourth \\(\\hat{5}\\) equals fourth \\(\\hat{5}\\) size. (See page 43 “Modal Color Theory” discussion read rows ineqmat like .) , sure enough, true: acoustic_scale approximation overtone_scale, might want retain repeated interval, : perfect fourth D G matches perfect fourth G C. also verify checking 38th entry sign vector also 0: fact, don’t consider seven distinct quantizations previous section? match overtone_scale point, except sc7-31 sc7-28. Note also scales barely occurred quantizations: accounts 2% quantizations according table end previous section. can better looking position 38 signvector. don’t compare entire signvectors ? various ways , one ’s simple calculate treat sign vectors real vectors 42-dimensional space compute distances: first column , labeled “o.s.” overtone_scale, represents distance overtone_scale’s sign vector 7 sign vectors (labeled rows matrix). columns represent distances among various quantizations. surprise upset, quantization closest signvector overtone_scale apparently sc7-27 represented mode (0, 2, 4, 5, 7, 8, 9). doesn’t mean sc7-27 better quantization acoustic_scale, just ’s one better reflects structure overtone_scale. (particular, comes closest capturing fact overtone_scale’s step sizes get smaller go scale. ’ll return consideration approach final approximation end next section.) modes melodic minor simply much regularity– many zeroes sign vectors–structurally similar overtone_scale. Another scalar property might consider many degrees freedom scale (“Modal Color Theory,” 26-27): freely can vary individual scale degrees maintaining overall structure? minimally constrained heptachord six degrees freedom, know overtone_scale one zero sign vector, make lose degree freedom. (choices \\(\\hat{1}\\) \\(\\hat{5}\\) determine \\(\\hat{2}\\) goes.) Let’s compare overtone_scale’s freedom seven quantizations: much less free vary overtone_scale! sc7-31 can vary along line saturation (“Modal Color Theory,” 20), sc7-31 little bit flexible. consequence quantizing twelve-tone equal temperament, simply doesn’t enough distinct notes accommodate flexible heptachords. can check degrees freedom 38 heptachordal set classes 12edo: table shows 11 set classes 1 degree freedom 27 set classes 2 degrees freedom. None freer . looking approximation overtone_scale similar structural properties (like 5 degrees freedom), unwittingly set fail restricting attention twelve-tone chromatic universe.","code":"getineqmat(4) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   -1    2   -1    0    0 #> [2,]   -1    1    1   -1    0 #> [3,]    0   -1    2   -1    0 #> [4,]   -2    1    0    1   -1 #> [5,]   -1   -1    1    1   -1 #> [6,]   -1    0   -1    2   -1 #> [7,]   -2    0    2    0   -1 #> [8,]    0   -2    0    2   -1 signvector(sc(4,6)) #> [1]  0 -1 -1 -1 -1  0 -1  0 signvector(sc(4,24)) #> [1]  0 -1 -1 -1 -1  0 -1  0 signvector(acoustic_scale) #>  [1]  0  0  0  1  1  1  0  0  0 -1  1  1  1  0  1  0  0  0 -1  0 -1  1  1  1  1 #> [26]  1  0  1  1  0  0  0 -1 -1 -1  1  1  0  0  0 -1 -1 signvector(overtone_scale) #>  [1]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 -1 -1 -1 -1 -1 -1  1  1  1  1 #> [26]  1  1  1 -1 -1 -1 -1 -1 -1 -1  1  1  0 -1 -1 -1 -1 whichsvzeroes(overtone_scale) #> [1] 38 getineqmat(7)[whichsvzeroes(overtone_scale),] #> [1] -1 -1  0  0  2  0  0 -1 signed_interval_class(overtone_scale[5]-overtone_scale[1]) #> [1] -4.98045 signed_interval_class(overtone_scale[5]-overtone_scale[2]) #> [1] 4.98045 signvector(acoustic_scale)[38] #> [1] 0 all_signvectors <- apply(final_quantizations, 2, signvector) all_signvectors[38,] #> 7-33 7-34 7-31 7-28 7-29 7-27 7-34  #>    0    0   -1    1    0    0    0 signvectors_with_overtone_scale <- rbind(signvector(overtone_scale), t(all_signvectors)) rownames(signvectors_with_overtone_scale)[1] <- \"o.s.\" dist(signvectors_with_overtone_scale) #>          o.s.     7-33     7-34     7-31     7-28     7-29     7-27 #> 7-33 4.795832                                                       #> 7-34 5.000000 4.472136                                              #> 7-31 5.385165 5.291503 4.000000                                     #> 7-28 5.196152 5.656854 5.477226 4.472136                            #> 7-29 5.099020 5.744563 6.403124 5.744563 4.358899                   #> 7-27 3.605551 5.099020 5.830952 6.000000 5.291503 4.358899          #> 7-34 5.385165 4.472136 6.480741 6.324555 5.830952 5.567764 3.464102 howfree(overtone_scale) #> [1] 5 apply(final_quantizations, 2, howfree) #> 7-33 7-34 7-31 7-28 7-29 7-27 7-34  #>    1    1    2    1    1    1    1 all_12edo_heptachords <- sapply(1:38, sc, card=7) heptachord_freedoms <- apply(all_12edo_heptachords, 2, howfree) table(heptachord_freedoms) #> heptachord_freedoms #>  1  2  #> 11 27"},{"path":"https://satbq.github.io/musicMCT/articles/musicMCT.html","id":"looking-for-better-approximations-outside-of-12edo","dir":"Articles","previous_headings":"How acoustic is the “acoustic scale”?","what":"4. Looking for better approximations outside of 12edo","title":"Introduction to musicMCT","text":"willing quantize equal divisions octave, can find much better structural approximations. particular, musicMCT function find quantized representative scalar color, lowest n-note equal division octave quantization exists. Note function returns list object. first entry list defines scale : pitch class integers 0, 6, 11, 15, 18, 20, 21. second entry tells us interpret integers 30 equal divisions octave. want use input functions, usually want pitch-class values , can access quantized_overtone_color$set. ’ll need tell functions interpret information 30edo separately, usually setting function’s edo parameter explicitly. check quantization two ways. Let’s convert twelve-tone equal temperament get sense objectively close overtone_scale, let’s verify belongs “color” overtone_scale verifying sign vector scale approximates: quantization indeed structural properties overtone_scale, actual pitches place rather farther away acoustic_scale . just reinforces point ’s thing one single quantization given scale: different quantizations satisfy different equivalences might choose care . spirit, ’s yet another way approximate overtone_scale haven’t yet considered. form approximation uses notion adjacency colors hyperplane arrangement (“Modal Color Theory,” 31-34). two scalar colors adjacent, one simplification preserves aspects scalar structure also enforcing greater degree regularity scale. instance, major triad (0, 4, 7) minor triad (0, 3, 7) non-equivalent structures adjacent “neutral” triad (0, 3.5, 7). neutral triad two sizes step (3.5 5) opposed three step sizes major minor (3, 4, 5). similar structure , last step (5 semitones fifth root) larger others, regular major minor makes distinction root-third third-fifth intervals. Another color adjacency may familiar music theorists relationship 5-limit just diatonic scale (Ptolemy’s “intense diatonic”) meantone diatonic scale represented (0, 2, 4, 5, 7, 9, 11) 12edo. just meantone scales similar many ways, meantone scale elides distinctions just diatonic makes, difference major minor whole tones. (meantone diatonic named particular elision difference, since averages sizes larger smaller just whole tones.) mind, let us ask: regular colors overtone_scale adjacent ? might first compare 12edo quantizations . musicMCT lets us function comparesignvecs(), returns 1 two sign vectors represent adjacent colors, 0 two sign vectors identical, -1 colors neither adjacent. Alas, none 12edo quantizations adjacent colors overtone_scale! isn’t surprising given table sign-vector distances near end previous section, reinforces conclusion twelve-tone equal temperament isn’t temperament ’d choose goal approximate 7 overtones. find colors adjacent overtone_scale? isn’t simple making minimal change sign vector creating scale match, since conceivable sign vectors don’t correspond scales can actually exist. try solve problem scratch, luckily don’t : part MCT map colors exist (scale sizes heptachords) adjacency relationships. map involves datasets large distribute musicMCT package. can downloaded GitHub repository modalcolortheory: representative_scales.rds (~80 MB) contains list scalar colors scales 2-7 notes, one concrete scale represent color representative_signvectors.rds (~10 MB) contains list corresponding sign vectors color_adjacencies.rds (~130 MB) contains information adjacency relationships colors (form adjacency list) wish work data, save files working directory, can find calling getwd() R. import files R session following commands: file representative_signvectors particularly useful enables us assign well-defined “color number” identify color MCT hyperplane arrangement (“Modal Color Theory,” 28). try look scale’s color number without representative_signvectors saved, ’ll probably get NULL result: file, ’ll discover overtone_scale belongs heptachord color 1824025. , can look accounting colors adjacent . color_adjacencies structured list R, whose top level organization reflects size scales studying, color_adjacencies[[7]] contains information geometry seven-note scales. find scales adjacent color 1824025, want list element color_adjacencies[[7]][[1824025]]. following code won’t work device unless color_adjacencies saved loaded R, objective find regular scale overtone_scale structurally adjacent : code runs device, tell regular quantized approximation overtone_scale scale (0, 2, 4, 6, 8, 10, 11) 14-tone equal temperament. Converted familiar semitone measurements, scale (0.00, 1.71, 3.43, 5.14, 6.86, 8.57, 9.43). understand better scale “regularizes” overtone_scale, let’s consider two scales terms ranked step sizes: tells us overtone_scale starts 6th largest step ascends progressively smaller step sizes, final step \\(\\hat{7}\\) \\(\\hat{1}\\) uses scale’s largest step size. best_simple_approximation reduces variety step sizes: steps \\(\\hat{1}\\) \\(\\hat{6}\\) equal. intervallic variety approximation retains \\(\\hat{6}\\) \\(\\hat{7}\\) still smallest step scale, \\(\\hat{7}\\) \\(\\hat{1}\\) still largest step scale. logic color adjacency, regular scale simplifies structure overtone_scale without contradicting structure. contrast, original acoustic_scale flatly contradict aspects overtone_scale’s structure. instance, acoustic_scale step \\(\\hat{4}\\) \\(\\hat{5}\\) smaller step \\(\\hat{5}\\) \\(\\hat{6}\\), overtone_scale \\(\\hat{5}\\) \\(\\hat{6}\\) smaller (step sizes get smaller last one). can see contradiction comparing 10th place respective sign vectors: acoustic_scale odd one . ’s also, terms voice-leading distance, clearly closer overtone_scale best_simple_approximation : ’s easy eyeball one smaller overall voice leading, partially answer question depends measure distance want use. (care things, acoustic_scale closer approximation using taxicab norm, best_simple_approximation closer Euclidean Chebyshev norms.)","code":"quantized_overtone_color <- quantize_color(overtone_scale) print(quantized_overtone_color) #> $set #> [1]  0  6 11 15 18 20 21 #>  #> $edo #> [1] 30 round(overtone_scale, digits=2) #> [1] 0.00 2.04 3.86 5.51 7.02 8.41 9.69 convert(quantized_overtone_color$set, 30, 12) #> [1] 0.0 2.4 4.4 6.0 7.2 8.0 8.4 isTRUE(all.equal(signvector(overtone_scale), signvector(quantized_overtone_color$set, edo=30))) #> [1] TRUE overtone_sv <- signvector(overtone_scale) apply(all_signvectors, 2, comparesignvecs, signvecY=overtone_sv) #> 7-33 7-34 7-31 7-28 7-29 7-27 7-34  #>   -1   -1   -1   -1   -1   -1   -1 representative_scales <- readRDS(\"representative_scales.rds\") representative_signvectors <- readRDS(\"representative_signvectords.rds\") color_adjacencies <- readRDS(\"color_adjacencies.rds\") colornum(overtone_scale) #> NULL os_adjacent_colors <- color_adjacencies[[7]][[colornum(overtone_scale)]] os_adjacent_scales <- representative_scales[[7]][, os_adjacent_colors] regularity <- apply(os_adjacent_scales, 2, countsvzeroes) most_regular_approximation <- os_adjacent_scales[, which.max(regularity)] quantize_color(most_regular_approximation) asword(overtone_scale) #> [1] 6 5 4 3 2 1 7 best_simple_approximation <- convert(c(0, 2, 4, 6, 8, 10, 11), 14, 12) asword(best_simple_approximation) #> [1] 2 2 2 2 2 1 3 signvector(overtone_scale)[10] #> [1] 1 signvector(best_simple_approximation)[10] #> [1] 0 signvector(acoustic_scale)[10] #> [1] -1 round(minimizeVL(overtone_scale, acoustic_scale), 3) #> [1]  0.000 -0.039  0.137  0.487 -0.020  0.595  0.312 round(minimizeVL(overtone_scale, best_simple_approximation), 3) #> [1]  0.000 -0.325 -0.435 -0.370 -0.162  0.166 -0.260"},{"path":"https://satbq.github.io/musicMCT/articles/musicMCT.html","id":"a-tempered-conclusion","dir":"Articles","previous_headings":"How acoustic is the “acoustic scale”?","what":"5. A tempered conclusion","title":"Introduction to musicMCT","text":"make tighter narrative end conclusive declaration best_simple_approximation really best way quantize overtone_scale. reality isn’t simple! best approximation scale depends ’re trying approximate . needs underscored, attempt justify certain scale structures mathematically ideal probably oldest tradition European music theory. using math talk scales, Modal Color Theory may look like contributes tradition, goal theory just opposite. questions MCT useful descriptive ones like “’re using scale, can ?” “want X, can find scale Y facilitate X?” Sami Abu Shumays right decry fallacy “idea tunings musical scales result mathematical laws, rather cultural choices intersect acoustical realities.” hope MCT math lets us get deeper insight nature intersection cultural choice acoustical affordance. end, acoustic_scale actually pretty decent approximation many purposes, especially ’re limited familiar 12 pitch-classes piano. Hopefully, though, vignette shows might, musicking different priorities, come make choices–musicMCT can aid us process.","code":""},{"path":"https://satbq.github.io/musicMCT/articles/musicMCT.html","id":"coda-brightness-graphs","dir":"Articles","previous_headings":"","what":"Coda: Brightness graphs","title":"Introduction to musicMCT","text":"point, ’ve done everything numerically, “Modal Color Theory” also visualization tools. one want introduce “brightness graph,” lets us visualize voice-leading relationships scale’s modes (thus degree internal structure scale, described “Modal Color Theory,” 7-11). Using musicMCT can make quick mock-ups brightness graphs brightnessgraph(). First let’s take look acoustic_scale:  information graph displayed way Figure 2b “Modal Color Theory” (p. 8), though ’ll notice differences compare article’s figure one vignette. One difference trivial: mode bottom figure mode IV whereas ’s listed mode VII JMT article. ’s just article treats melodic minor mode whereas ’ve asked modes acoustic_scale. (replace acoustic_scale melodic_minor command , get identical graph roman numeral labels shifted around.) Either way, precise pitch values nodes : bottom mode graphs (0, 1, 3, 4, 6, 8, 10). less trivial difference article graph vignettes overall shape. function brightnessgraph() determines vertical position graph nodes exactly “Modal Color Theory” describes, less guidance make decisions left-right placement nodes. produces graphs usually legible may clarify underlying structure: tend use function first draft construct (ideally revealing) graphs hand. instance, Figure 2b “Modal Color Theory” represents \\(T_2\\) relationships vertical arrows, resulting graph whose overall shape trapezoid. brightnessgraph() obscures predominance \\(T_2\\) structure scale making chain whole steps bow left middle, giving graph diamond-like shape. Let’s now take look brightness graph overtone_scale:  looks pretty messy! graph less connected (.e. fewer arrows) vertical placement nodes seems haphazard. reflects fact overtone scale less regularity measured degrees freedom number zeroes signvector(). Nevertheless, graph still useful information. Since height mode corresponds sum brightness, can see comparisons glance. can also use sum brightness relationships proxy relative height individual pitches scale: pitch serves tonic bright mode, pitch low (“dark”) relation scale. Thus, since mode VII top graph , \\(\\hat{7}\\) must darkest (relatively lowest) pitch scale. Conversely, since mode III bottom graph, \\(\\hat{3}\\) brightest individual note scale. Recall one approximations tested quantization overtone_scale division octave 30 steps. Let’s see brightness graph approximation looks like:  ’s impressively close graph actual overtone_scale! (truth, got little lucky : many colors offer enough room variation brightnessgraph() doesn’t always preserve visually obvious similarity.) Aside check quantize_color() works intended, one thing note example brightnessgraph(), like almost functions musicMCT makes convenient work “chromatic cardinalities” (.e. number unit steps octave) besides 12edo. Just careful make direct comparisons absolute values reckoned different systems: note, instance, sum brightnesses 30edo quantization around 90 whereas 36 brightness graph original overtone_scale. ’s ’ve changed unit measurement 2.5 times smaller, values like distances sums scale correspondingly. might find instructive explore brightness graphs remaining final_quantizations , show considerable variety one next. gives glimpse range possible structures seven note scales. Simply change number 4 line code value 1 7 check different scales:  Finally, let’s take look brightness graph best_simple_approximation. ’m going surpress listing pitch-classes mode, since without manual tweaking overlap point illegibility:  feels right . glance, ’s lot like graph overtone_scale without mess. modes beneath VII now neatly lined single row bottom. ’s visual equivalent search regularity color adjacency previous section. something like brightness graphs: summarize, picture two, ideas one spend several thousand words developing.","code":"brightnessgraph(acoustic_scale) brightnessgraph(overtone_scale, numdigits=1, show_sums=FALSE) brightnessgraph(quantized_overtone_color$set, edo=30, show_sums=FALSE) brightnessgraph(final_quantizations[,4]) brightnessgraph(best_simple_approximation, show_pitches=FALSE, show_sums=FALSE)"},{"path":"https://satbq.github.io/musicMCT/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Sherrill. Author, maintainer, copyright holder.","code":""},{"path":"https://satbq.github.io/musicMCT/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sherrill P (2025). “Modal Color Theory.” Journal Music Theory, 69(1), 1-49.","code":"@Article{,   title = {Modal Color Theory},   author = {Paul Sherrill},   journal = {Journal of Music Theory},   year = {2025},   volume = {69},   number = {1},   pages = {1-49}, }"},{"path":"https://satbq.github.io/musicMCT/index.html","id":"musicmct","dir":"","previous_headings":"","what":"Analysis of Musical Scale Structure","title":"Analysis of Musical Scale Structure","text":"“MCT” musicMCT stands Modal Color Theory, theory musical scale structure developed Paul Sherrill, “Modal Color Theory,” Journal Music Theory 69/1 (2025): 1-49. goal package give musicians music scholars computational tools make easier work theory. nutshell, Modal Color Theory models musical scales points geometry. location points relative various hyperplane arrangements tells us lot scales’ internal structures mutual relationships. shape hyperplane arrangements gets pretty complex–important case seven-note scales, main arrangement 42 hyperplanes 6d space–computational tools helpful. ’ve ever wondered piece music uses one scale rather another; want know jazz chord-scale concept lydian “bright” locrian “dark”; ’ve ever wanted design microtonal scale scratch; ’re theorist wants geometrical perspective concepts like voice leading maximal evenness: musicMCT might useful !","code":""},{"path":"https://satbq.github.io/musicMCT/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis of Musical Scale Structure","text":"can install development version musicMCT GitHub : addition package , probably want use following large files contain data MCT geometries: representative_scales.rds (~80 MB) contains list scalar colors scales 2-7 notes, one concrete scale represent color representative_signvectors.rds (~10 MB) contains list corresponding sign vectors color_adjacencies.rds (~130 MB) contains information adjacency relationships colors (form adjacency list) Download files, save working directory, load :","code":"install.packages(\"remotes\") remotes::install_github(\"satbq/musicMCT\") representative_scales <- readRDS(\"representative_scales.rds\") representative_signvectors <- readRDS(\"representative_signvectords.rds\") color_adjacencies <- readRDS(\"color_adjacencies.rds\")"},{"path":"https://satbq.github.io/musicMCT/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Analysis of Musical Scale Structure","text":"detailed introduction using package, please see vignette “musicMCT”. quick example, let’s define common “just intonation” version major scale run tests :","code":"library(musicMCT) just_dia_frequency_ratios <- c(1, 9/8, 5/4, 4/3, 3/2, 5/3, 15/8) just_dia <- 12 * log2(just_dia_frequency_ratios)  # This definition of the just diatonic explicitly derives it from the  # frequency ratios, which I've done to model that process for you. However, # musicMCT also has a convenience function that will give us the  # same result much faster: try out j(dia) or j(1,2,3,4,5,6,7) for yourself.  # The modes of the scale are displayed as the columns in this matrix: sim(just_dia) #>           [,1]     [,2]      [,3]      [,4]     [,5]      [,6]     [,7] #> [1,]  0.000000 0.000000  0.000000  0.000000 0.000000  0.000000 0.000000 #> [2,]  2.039100 1.824037  1.117313  2.039100 1.824037  2.039100 1.117313 #> [3,]  3.863137 2.941350  3.156413  3.863137 3.863137  3.156413 3.156413 #> [4,]  4.980450 4.980450  4.980450  5.902237 4.980450  5.195513 4.980450 #> [5,]  7.019550 6.804487  7.019550  7.019550 7.019550  7.019550 6.097763 #> [6,]  8.843587 8.843587  8.136863  9.058650 8.843587  8.136863 8.136863 #> [7,] 10.882687 9.960900 10.175963 10.882687 9.960900 10.175963 9.960900  # A few pieces of evidence that the scale is \"pairwise well-formed\": asword(just_dia) #> [1] 3 2 1 3 2 3 1 howfree(just_dia) #> [1] 2 isgwf(just_dia) #> [1] TRUE  # A 15 equal-tempered approximation of just-dia which preserves its \"color\": quantized_just_dia <- quantize_color(just_dia) print(quantized_just_dia) #> $set #> [1]  0  3  5  6  9 11 14 #>  #> $edo #> [1] 15  # Finally, let's see a rough brightness graph for the scale. (R can assemble the necessary # information, but musicMCT doesn't yet make the graphs pretty!) brightnessgraph(quantized_just_dia$set, edo=quantized_just_dia$edo)"},{"path":"https://satbq.github.io/musicMCT/reference/OPTC_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a scale lie in the canonical fundamental domain for OPTC symmetries? — OPTC_test","title":"Does a scale lie in the canonical fundamental domain for OPTC symmetries? — OPTC_test","text":"Modal Color Theory capable describing \"scales\" (perhaps \"melodies\" might accurate) sorts unscalar things, like repeating notes, ascending descending inconsistently, observing octave equivalence, . function tests whether input 'well-behaved' form starts 0, ascends, repeat pitches, go octave. find interesting scale structure represented set satisfy constraints, can always desaturate (.e. call something like saturate(.1, my_scale_with_bad_OPTCs)).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/OPTC_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a scale lie in the canonical fundamental domain for OPTC symmetries? — OPTC_test","text":"","code":"OPTC_test(set, edo = 12, rounder = 10, single_answer = TRUE)"},{"path":"https://satbq.github.io/musicMCT/reference/OPTC_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a scale lie in the canonical fundamental domain for OPTC symmetries? — OPTC_test","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round . single_answer function return single value TRUE FALSE? Defaults TRUE. set FALSE, returns vector 4 Boolean values indicate whether scale individually passes O, P, T, C criteria fundamental domain.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/OPTC_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a scale lie in the canonical fundamental domain for OPTC symmetries? — OPTC_test","text":"Either single Boolean value vector 4 Boolean values, depending single_answer argument.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/OPTC_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does a scale lie in the canonical fundamental domain for OPTC symmetries? — OPTC_test","text":"","code":"major_triad_normal_form <- c(0, 4, 7) major_triad_open_spacing <- c(0, 7, 16) major_triad_voice_crossing <- c(0, 7, 4) major_triad_on_des <- c(1, 5, 8) major_triad_doubled_third_omit_5 <- c(0, 4, 4) example_triads <- cbind(major_triad_normal_form,          major_triad_open_spacing,          major_triad_voice_crossing,          major_triad_on_des,          major_triad_doubled_third_omit_5)  apply(example_triads, 2, OPTC_test) #>          major_triad_normal_form         major_triad_open_spacing  #>                             TRUE                            FALSE  #>       major_triad_voice_crossing               major_triad_on_des  #>                            FALSE                            FALSE  #> major_triad_doubled_third_omit_5  #>                            FALSE  OPTC_test(major_triad_voice_crossing, single_answer=FALSE) #>     O     P     T     C  #>  TRUE FALSE  TRUE  TRUE"},{"path":"https://satbq.github.io/musicMCT/reference/VL_rolodex.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal voice leadings to all transpositions of some Tn-type mod k — VL_rolodex","title":"Minimal voice leadings to all transpositions of some Tn-type mod k — VL_rolodex","text":"Given starting set (source) tn-type voice leading goal (goal_type), find minimal voice leading every transposition (mod k universe) goal. goal specified, goal assumed tn-type source set. lets see, example, minimal voice leading C7 dominant seventh chords mod 12. think suitably serious clear name information, metaphor behind \"rolodex\" voice leadings contact information source acquaintances goal_type.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/VL_rolodex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal voice leadings to all transpositions of some Tn-type mod k — VL_rolodex","text":"","code":"VL_rolodex(   source,   goal_type = NULL,   reorder = TRUE,   method = \"taxicab\",   edo = 12,   no_ties = FALSE )"},{"path":"https://satbq.github.io/musicMCT/reference/VL_rolodex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal voice leadings to all transpositions of some Tn-type mod k — VL_rolodex","text":"source Numeric vector, pitch-class set start voice leading goal_type Numeric vector, pitch-class set representing tn-type voice leading goal reorder results listed smallest largest voice leading size? Defaults TRUE. FALSE results listed transposition order (.e. \\(T_1\\), \\(T_2\\), ..., \\(T_{edo-1}\\), \\(T_0\\)). method distance metric used? Defaults \"taxicab\" can \"euclidean\". edo Number unit steps octave. Defaults 12. no_ties multiple VLs equally small, one returned? Defaults FALSE, generally human user want. functions call minimize_VL need TRUE predictable shapes returned value.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/VL_rolodex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal voice leadings to all transpositions of some Tn-type mod k — VL_rolodex","text":"list length edo, entry represents voice leading (group tied voice leadings). List entries named transposition level.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/VL_rolodex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal voice leadings to all transpositions of some Tn-type mod k — VL_rolodex","text":"","code":"VL_rolodex(c(0,4,7)) #> $`0` #> [1] 0 0 0 #>  #> $`4` #> [1] -1  0  1 #>  #> $`8` #> [1]  0 -1  1 #>  #> $`1` #> [1] 1 1 1 #>  #> $`3` #> [1] -2 -1  0 #>  #> $`5` #> [1] 0 1 2 #>  #> $`7` #> [1] -1 -2  0 #>  #> $`9` #> [1] 1 0 2 #>  #> $`11` #> [1] -1 -1 -1 #>  #> $`2` #>      [,1] [,2] [,3] #> [1,]    2    2    2 #> [2,]   -3   -2   -1 #>  #> $`6` #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]   -2   -3   -1 #>  #> $`10` #>      [,1] [,2] [,3] #> [1,]    2    1    3 #> [2,]   -2   -2   -2 #>   VL_rolodex(c(0,4,7), reorder=FALSE) #> $`1` #> [1] 1 1 1 #>  #> $`2` #>      [,1] [,2] [,3] #> [1,]    2    2    2 #> [2,]   -3   -2   -1 #>  #> $`3` #> [1] -2 -1  0 #>  #> $`4` #> [1] -1  0  1 #>  #> $`5` #> [1] 0 1 2 #>  #> $`6` #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]   -2   -3   -1 #>  #> $`7` #> [1] -1 -2  0 #>  #> $`8` #> [1]  0 -1  1 #>  #> $`9` #> [1] 1 0 2 #>  #> $`10` #>      [,1] [,2] [,3] #> [1,]    2    1    3 #> [2,]   -2   -2   -2 #>  #> $`11` #> [1] -1 -1 -1 #>  #> $`0` #> [1] 0 0 0 #>   #Multisets sort of work! Best resolutions from dom7 to triads with doubled root: VL_rolodex(c(0,4,7,10), c(0, 0, 4, 7)) #> $`0` #> [1] 0 0 0 2 #>  #> $`3` #> [1]  3 -1  0  0 #>  #> $`5` #> [1]  0  1 -2 -1 #>  #> $`6` #> [1]  1  2 -1  0 #>  #> $`8` #> [1]  0 -1  1 -2 #>  #> $`9` #> [1]  1  0  2 -1 #>  #> $`11` #> [1] -1 -1 -1  1 #>  #> $`1` #> [1] 1 1 1 3 #>  #> $`2` #> [1]  2 -2 -1 -1 #>  #> $`4` #>      [,1] [,2] [,3] [,4] #> [1,]    4    0    1    1 #> [2,]   -1    0   -3   -2 #>  #> $`7` #>      [,1] [,2] [,3] [,4] #> [1,]    2    3    0    1 #> [2,]   -1   -2    0   -3 #>  #> $`10` #>      [,1] [,2] [,3] [,4] #> [1,]    2    1    3    0 #> [2,]   -2   -2   -2    0 #>"},{"path":"https://satbq.github.io/musicMCT/reference/asword.html","id":null,"dir":"Reference","previous_headings":"","what":"Algebraic word of a set's step sizes — asword","title":"Algebraic word of a set's step sizes — asword","text":"Among others, Carey & Clampitt (1989) Clampitt (1997) shown much can learned set representing word \\(m\\) \"letters\" represent \\(m\\) distinct steps adjacent members set. less done theory fundamentals classes major scale represented TTSTTTS (temporarily forget T S represent specific interval sizes). scholarship algebraic letters usually represented letters Latin alphabet, computational purposes useful explicitly ordered. , major scale represented intergers 2212221, distinct 1121112. (Thus asword makes finer distinctions might expect coming word-theoretic context.)","code":""},{"path":"https://satbq.github.io/musicMCT/reference/asword.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Algebraic word of a set's step sizes — asword","text":"","code":"asword(set, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/asword.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Algebraic word of a set's step sizes — asword","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/asword.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Algebraic word of a set's step sizes — asword","text":"Vector integers length set. 1 always lowest value, representing smallest step size set.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/asword.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Algebraic word of a set's step sizes — asword","text":"","code":"dia_12edo <- c(0, 2, 4, 5, 7, 9, 11) qcm_fifth <- meantone_fifth() qcm_dia <- sort(((0:6)*qcm_fifth)%%12) just_dia <- 12 * log2(c(1, 9/8, 5/4, 4/3, 3/2, 5/3, 15/8)) asword(dia_12edo) #> [1] 2 2 1 2 2 2 1 asword(qcm_dia) #> [1] 2 2 2 1 2 2 1 asword(just_dia) #> [1] 3 2 1 3 2 3 1  #### asword is less discriminating than colornum.  #### See \"Modal Color Theory,\" 16 set1 <- c(0, 1, 4, 7, 8) set2 <- c(0, 1, 3, 5, 6) set1_word <- asword(set1) set2_word <- asword(set2) isTRUE(all.equal(set1_word, set2_word)) #> [1] TRUE colornum(set1) == colornum(set2) #> logical(0)"},{"path":"https://satbq.github.io/musicMCT/reference/brightnessComps.html","id":null,"dir":"Reference","previous_headings":"","what":"Voice-leading brightness relationships for a scale's modes — brightnessComps","title":"Voice-leading brightness relationships for a scale's modes — brightnessComps","text":"essential step creating brightness graph scale's modes compute pairwise comparisons modes. ones strictly brighter others according \"voice-leading brightness\" (see \"Modal Color Theory,\" 6-7)? function makes pairwise comparisons manner useful computation. want human-readable version information, use brightnessgraph() instead.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/brightnessComps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Voice-leading brightness relationships for a scale's modes — brightnessComps","text":"","code":"brightnessComps(set, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/brightnessComps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Voice-leading brightness relationships for a scale's modes — brightnessComps","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/brightnessComps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Voice-leading brightness relationships for a scale's modes — brightnessComps","text":"n--n matrix n size scale. Row represents mode scale comparison 7 modes. entry row , column j -1, mode \"voice-leading darker\" mode j. 1, mode \"voice-leading brighter\". 0, mode neither brighter darker, either contrary motion involved mode identical mode j. (Entries principal diagonal always 0.)","code":""},{"path":"https://satbq.github.io/musicMCT/reference/brightnessComps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Voice-leading brightness relationships for a scale's modes — brightnessComps","text":"Note returned value shows voice-leading brightness comparisons, just transitive reduction comparisons. (, dorian shown darker ionian even though mixolydian intervenes brightness graph.)","code":""},{"path":"https://satbq.github.io/musicMCT/reference/brightnessComps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Voice-leading brightness relationships for a scale's modes — brightnessComps","text":"","code":"# Because the diatonic scale, sc7-35, is non-degenerate well-formed, the only # 0 entries should be on its diagonal. brightnessComps(sc(7,35)) #>   1  2  3  4  5  6  7 #> 1 0 -1 -1 -1 -1 -1 -1 #> 2 1  0  1  1 -1  1  1 #> 3 1 -1  0  1 -1 -1  1 #> 4 1 -1 -1  0 -1 -1 -1 #> 5 1  1  1  1  0  1  1 #> 6 1 -1  1  1 -1  0  1 #> 7 1 -1 -1  1 -1 -1  0  mystic_chord <- sc(6,34) colSums(sim(mystic_chord)) # The sum brightnesses of the mystic chord's 6 modes #> [1] 25 31 31 31 31 31 brightnessComps(mystic_chord)  #>   1  2  3  4  5  6 #> 1 0 -1 -1 -1 -1 -1 #> 2 1  0  0  0  0  0 #> 3 1  0  0  0  0  0 #> 4 1  0  0  0  0  0 #> 5 1  0  0  0  0  0 #> 6 1  0  0  0  0  0 # Almost all 0s because very few mode pairs are comparable. # That's because nearly all modes have the same sum, which means they have sum-brightness # ties, and voice-leading brightness can't break a sum-brightness tie. # (See \"Modal Color Theory,\" 7.)"},{"path":"https://satbq.github.io/musicMCT/reference/brightnessgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize brightness relationships among modes of a scale — brightnessgraph","title":"Visualize brightness relationships among modes of a scale — brightnessgraph","text":"Discussed \"Modal Color Theory\" (pp. 7-11), brightness graph scale Hasse diagram represents sum- voice-leading brightness relationships modes scale. node graph represents mode. default options, large Roman numeral node indicates mode input scale represents. (input scale roman numeral .) Small Arabic numerals beneath Roman numeral indicate pitch-classes mode (relative scale degree 1 0). parentheses, sum brightness mode shown. Modes higher sum brightness farther graph. Arrows connect modes can compared voice-leading brightness. arrows show transitive reduction VL-brightness comparisons, can travel two sets going \"\" \"\" arrows, source destination indeed related voice-leading brightness. Various visual parameters can configured: numdigits determines many digits pitch-class display; show_sums toggles sum brightness values; show_pitches toggles individual pitch classes mode; fixed_do, set TRUE switches graph showing \"parallel\" modes (e.g. C ionian vs C aeolian) showing \"relative\" modes (e.g. C ionian aeolian). now, function smart way determine horizontal positioning modes graph. uses heuristic works well many sets, sometimes create much visual overlap clarify underlying sturcture particularly well. Think automatically generated graphs starting point manual fine tuning.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/brightnessgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize brightness relationships among modes of a scale — brightnessgraph","text":"","code":"brightnessgraph(   set,   numdigits = 2,   show_sums = TRUE,   show_pitches = TRUE,   fixed_do = FALSE,   edo = 12,   rounder = 10 )"},{"path":"https://satbq.github.io/musicMCT/reference/brightnessgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize brightness relationships among modes of a scale — brightnessgraph","text":"set Numeric vector pitch-classes set numdigits Integer: many digits pitch-class show? Defaults 2. show_sums Boolean: graph show sum brightness values? Defaults TRUE. show_pitches Boolean: graph show values note scale? Defaults TRUE. fixed_do Boolean: graph use fixed pitches input set? Defaults FALSE. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/brightnessgraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize brightness relationships among modes of a scale — brightnessgraph","text":"NULL plots brightness graph graphic device","code":""},{"path":"https://satbq.github.io/musicMCT/reference/brightnessgraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize brightness relationships among modes of a scale — brightnessgraph","text":"","code":"brightnessgraph(c(0,2,4,5,7,9,11))  brightnessgraph(c(0,2,4,5,7,9,11), fixed_do=TRUE)  brightnessgraph(c(0,1,4,9,11),edo=15)   #### A more complicated graph werck_ratios <- c(1, 256/243, 64*sqrt(2)/81, 32/27, (256/243)*2^(1/4), 4/3,    1024/729, (8/9)*2^(3/4), 128/81, (1024/729)*2^(1/4), 16/9, (128/81)*2^(1/4)) werckmeister_3 <- 12 * log2(werck_ratios) brightnessgraph(werckmeister_3, show_sums=FALSE, show_pitches=FALSE)"},{"path":"https://satbq.github.io/musicMCT/reference/carlos_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a step size for one of Wendy Carlos's scales — carlos_step","title":"Define a step size for one of Wendy Carlos's scales — carlos_step","text":"album Beauty Beast, Wendy Carlos developed several non-octave scales whose step sizes calcualted optimize approximations three intervals: 3:2 fifth, 5:4 major third, 6:5 minor third. alpha, beta, gamma, delta scales differ terms strongly privilege just intervals. basic step size scale created calling function appropriate name argument (e.g. \"alpha\"). can also choose weights three approximated just intervals, case name argument overridden.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/carlos_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a step size for one of Wendy Carlos's scales — carlos_step","text":"","code":"carlos_step(name = \"alpha\", weights = NULL, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/carlos_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a step size for one of Wendy Carlos's scales — carlos_step","text":"name Carlos's four scales create: \"alpha\", \"beta\", \"gamma\", \"delta\". Defaults \"alpha\" weights Numeric vector length 3 assigning number steps correspond 3:2, 5:4, 6:5, respectively. Overrides name specificied. edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/carlos_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a step size for one of Wendy Carlos's scales — carlos_step","text":"Single numeric value containing step size desired scale","code":""},{"path":"https://satbq.github.io/musicMCT/reference/carlos_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a step size for one of Wendy Carlos's scales — carlos_step","text":"","code":"alpha_scale <- (0:31) * carlos_step() practically_12tet <- (0:24) * carlos_step(weights=c(7, 4, 3))"},{"path":"https://satbq.github.io/musicMCT/reference/colornum.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference numbers for scale structures — colornum","title":"Reference numbers for scale structures — colornum","text":"described p. 28 \"Modal Color Theory,\" convenient systematic labeling system (\"color numbers\") refer distinct colors hyperplane arrangements. serves similar function Forte's set class numbers traditional pitch-class set theory. Color numbers defined reference complete list possible sign vectors cardinality, depend extensive prior computation stored object representative_signvectors. (large file included package musicMCT ; needs downloaded separately, saved working directory, loaded entering representative_signvectors <- readRDS(\"representative_signvectors.rds\"). Color numbers currently defined scales 7 fewer notes.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/colornum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference numbers for scale structures — colornum","text":"","code":"colornum(set, ineqmat = NULL, signvector_list = NULL, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/colornum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reference numbers for scale structures — colornum","text":"set Numeric vector pitch-classes set ineqmat Defaults NULL, case function assumes want use standard hyperplane arrangement MCT. can enter different matrix contains normal vectors hyperplane arrangement format standard ineqmats. signvector_list list signvectors use reference colornum assigns value. Defaults NULL attempt use representative_signvectors, needs downloaded assigned separately package musicMCT. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/colornum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reference numbers for scale structures — colornum","text":"Single non-negative integer (color number) signvector_list specified representative_signvectors loaded; otherwise NULL","code":""},{"path":"https://satbq.github.io/musicMCT/reference/colornum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reference numbers for scale structures — colornum","text":"Note perfectly even \"white\" scale number 0 every cardinality definition. function assumes need reminded cardinality set entered. , color number 2 every cardinality, can get value returned entering trichord, tetrachord, etc.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/colornum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reference numbers for scale structures — colornum","text":"","code":"colornum(edoo(5)) #> [1] 0 colornum(c(0,3,7)) #> NULL colornum(c(0,2,7)) #> NULL colornum(c(0,1,3,7)) #> NULL colornum(c(0,1,3,6,10,15,21), edo=33) #> NULL colornum(c(0,2,4,5,7,9,11)) #> NULL"},{"path":"https://satbq.github.io/musicMCT/reference/comparesignvecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Do two sign vectors represent adjacent colors? — comparesignvecs","title":"Do two sign vectors represent adjacent colors? — comparesignvecs","text":"\"Modal Color Theory\" (pp. 31ff.) describes, can useful know whether two colors adjacent MCT space. , can one scalar color continuously modified becomes , without crossing third color? instance, 5-limit just diatonic scale two-dimensional color adjacent 1-d line meantone diatonic scales. means, sense, meantone structure good approximation 5-limit just structure.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/comparesignvecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do two sign vectors represent adjacent colors? — comparesignvecs","text":"","code":"comparesignvecs(signvecX, signvecY)"},{"path":"https://satbq.github.io/musicMCT/reference/comparesignvecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do two sign vectors represent adjacent colors? — comparesignvecs","text":"signvecX, signvecY pair sign vectors compared. Note must sign vectors, scales .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/comparesignvecs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do two sign vectors represent adjacent colors? — comparesignvecs","text":"Integer: 0 sign vectors represent color, 1 adjacent, -1 neither adjacent identical.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/comparesignvecs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do two sign vectors represent adjacent colors? — comparesignvecs","text":"","code":"meantone_major_sv <- signvector(c(0,2,4,5,7,9,11)) meantone_dorian_sv <- signvector(c(0,2,3,5,7,9,10)) just_major <- 12 * log2(c(1, 9/8, 5/4, 4/3, 3/2, 5/3, 15/8)) just_dorian <- sim(just_major)[,2]  just_major_sv <- signvector(just_major) just_dorian_sv <- signvector(just_dorian)  comparesignvecs(meantone_major_sv, just_major_sv) #> [1] 1 comparesignvecs(meantone_dorian_sv, just_major_sv) #> [1] -1 comparesignvecs(meantone_dorian_sv, just_dorian_sv) #> [1] 1"},{"path":"https://satbq.github.io/musicMCT/reference/convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between octave measurements — convert","title":"Convert between octave measurements — convert","text":"default period scale (normally octave) size 12 units (semitones). can useful convert different measurement unit, e.g. compare scale defined 19-tone equal temperament (19edo) size intervals measured normal 12edo semitones, vice versa.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between octave measurements — convert","text":"","code":"convert(x, edo1, edo2)"},{"path":"https://satbq.github.io/musicMCT/reference/convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between octave measurements — convert","text":"x set convert numeric vector. edo1 size period measured units input x. Numeric. edo2 period size convert . Numeric.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between octave measurements — convert","text":"numeric vector length x representing input set converted desired cardinality (edo2).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/convert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between octave measurements — convert","text":"","code":"maqam_rast <- c(0, 2, 3.5, 5, 7, 9, 10.5) convert(maqam_rast, 12, 24) #> [1]  0  4  7 10 14 18 21  perfect_fifth <- 12 * log2(3/2) lydian_scale <- sort((perfect_fifth * (0:6)) %% 12) convert(lydian_scale, 12, 53) #> [1]  0.000000  9.006025 18.012050 27.018075 31.003013 40.009038 49.015063"},{"path":"https://satbq.github.io/musicMCT/reference/coord_to_edo.html","id":null,"dir":"Reference","previous_headings":"","what":"Coordinate systems for scale representation — coord_to_edo","title":"Coordinate systems for scale representation — coord_to_edo","text":"Usually, intuitive music theorists represent scale vector pitch-classes contains. However, certain computations setting Modal Color Theory, convenient use coordinate system \"white\" perfectly even scale origin (point hyperplanes arrangement defining scalar \"colors\" intersect). Therefore, two functions convert two coordinate systems: coord_to_edo takes scale represented pitch classes returns displacement vector \"white\" coord_from_edo reverse.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/coord_to_edo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinate systems for scale representation — coord_to_edo","text":"","code":"coord_to_edo(set, edo = 12)  coord_from_edo(set, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/coord_to_edo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coordinate systems for scale representation — coord_to_edo","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/coord_to_edo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coordinate systems for scale representation — coord_to_edo","text":"Numeric vector length set. scale, new coordinate system.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/coord_to_edo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coordinate systems for scale representation — coord_to_edo","text":"noted representative \"white\" scale used necessarily closeset one scale question. Instead, unique transposition white 0 first coordinate. natural context Modal Color Theory, essentially always assumes transpositional equivalence \\(x_0 = 0\\). closest transposition \"white\" set one sum class set, guaranteeing voice leading \"pure contrary\" (Tymoczko 2011, 81ff; explored Straus 2018 https://doi.org/10.1215/00222909-7127694).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/coord_to_edo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coordinate systems for scale representation — coord_to_edo","text":"","code":"dominant_seventh_chord <- c(0, 2, 6, 9) coord_to_edo(dominant_seventh_chord) #> [1]  0 -1  0  0  ait1 <- c(0, 1, 4, 6) ait2 <- c(0, 1, 3, 7) coord_to_edo(ait1) #> [1]  0 -2 -2 -3 coord_to_edo(ait2) # ! #> [1]  0 -2 -3 -2  weitzmann_pentachord <- coord_from_edo(c(0, -1, 0, 0, 0)) # See note 53 of \"Modal Color Theory\" convert(weitzmann_pentachord, 12, 60) #> [1]  0  7 24 36 48 coord_to_edo(weitzmann_pentachord) #> [1]  0 -1  0  0  0"},{"path":"https://satbq.github.io/musicMCT/reference/diatonicsubsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific varieties of scalar subsets given a generic shape — diatonicsubsets","title":"Specific varieties of scalar subsets given a generic shape — diatonicsubsets","text":"Considered mod 7, traditional triads diatonic scale instances generic shape (0,2,4). come three varieties: major, minor, diminished. function lists distinct varieties similarly defined generic shape occur subsets specified scale (larger set).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/diatonicsubsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific varieties of scalar subsets given a generic shape — diatonicsubsets","text":"","code":"diatonicsubsets(subsetdegrees, set, unique = TRUE, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/diatonicsubsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific varieties of scalar subsets given a generic shape — diatonicsubsets","text":"subsetdegrees Vector integers indicating generic shape use, e.g. c(0,2,4) tertian trids heptachord. Lowest note 0. set scale find subsets , numeric vector unique variety listed ? Defaults TRUE. FALSE, specific variety listed corresponding many times occurs subset. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/diatonicsubsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific varieties of scalar subsets given a generic shape — diatonicsubsets","text":"numeric matrix whose columns represent specific varieties subset","code":""},{"path":"https://satbq.github.io/musicMCT/reference/diatonicsubsets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specific varieties of scalar subsets given a generic shape — diatonicsubsets","text":"","code":"c_major_scale <- c(0,2,4,5,7,9,11) double_harmonic_scale <- c(0,1,4,5,7,8,11)  diatonicsubsets(c(0,2,4), c_major_scale) #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    4    3    3 #> [3,]    7    7    6 diatonicsubsets(c(0,2,4), c_major_scale, unique=FALSE) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    0    0    0    0    0    0    0 #> [2,]    4    3    3    4    4    3    3 #> [3,]    7    7    7    7    7    7    6 diatonicsubsets(c(0,2,4), double_harmonic_scale) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    4    3    4    4    2 #> [3,]    7    7    6    8    6"},{"path":"https://satbq.github.io/musicMCT/reference/edoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Perfectly even scales (the color white) — edoo","title":"Perfectly even scales (the color white) — edoo","text":"Creates perfectly even scale divides octave n equal steps. scales serve origin hyperplane arrangements Modal Color Theory, whence name edoo \"equal division octave origin.\"","code":""},{"path":"https://satbq.github.io/musicMCT/reference/edoo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perfectly even scales (the color white) — edoo","text":"","code":"edoo(card, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/edoo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perfectly even scales (the color white) — edoo","text":"card Number notes scale. Numeric. edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/edoo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perfectly even scales (the color white) — edoo","text":"Numeric vector length card representing scale card notes.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/edoo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perfectly even scales (the color white) — edoo","text":"","code":"edoo(5) #> [1] 0.0 2.4 4.8 7.2 9.6 edoo(5, edo=15) #> [1]  0  3  6  9 12 octatonic_scale <- sort(c(edoo(4), edoo(4)+1))"},{"path":"https://satbq.github.io/musicMCT/reference/eps.html","id":null,"dir":"Reference","previous_headings":"","what":"The brightness ratio — eps","title":"The brightness ratio — eps","text":"Section 3.3 \"Modal Color Theory\" describes \"brightness ratio\" characterizes modes scale terms well \"sum brightness\" acts proxy \"voice-leading brightness.\" Scales brighntess ratio less 1 pretty well behaved perspective, ones brightness ratio greater 1 poorly behaved. brightness ratio 0, sum brightness voice-leading brightness give exactly results. (can happen sets two extremes: like diatonic scale well formed like Weitzmann scales, differ \"white\" one scale degree.) wish come descriptive name \"brightness ratio\" property, really ratio brightness sense might expect (.e. \"scale 20% bright\"). Rather, ratio two brightness-related properties, delta eps. \"Modal Color Theory\" (p. 20) offers definitions . Delta \"largest sum difference (voice-leading) incomparable modes,\" value 0 definition modes comparable. (\", sense, measure badly voice-leading brightness breaks perspective sum brightness.\") Epsilon \"represents smallest sum difference non-identical comparable modes.\" harder give intuitive gloss , attempt \"MCT\" \"Essentially, epsilon measures finest distinction voice-leading brightness capable parsing.\" brightness ratio (ratio) simply delta divided epsilon.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/eps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The brightness ratio — eps","text":"","code":"eps(set, edo = 12, rounder = 10)  delta(set, edo = 12, rounder = 10)  ratio(set, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/eps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The brightness ratio — eps","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/eps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The brightness ratio — eps","text":"Single non-negative numeric value","code":""},{"path":"https://satbq.github.io/musicMCT/reference/eps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The brightness ratio — eps","text":"","code":"harmonic_minor <- c(0,2,3,5,7,8,11) hypersaturated_harmonic_minor <- saturate(2, harmonic_minor) c(delta(harmonic_minor), eps(harmonic_minor)) #> [1] 2 3 c(delta(hypersaturated_harmonic_minor), eps(hypersaturated_harmonic_minor)) #> [1] 4 6  # Delta and epsilon depend on the precise scale, but ratio() is constant on a hue ratio(harmonic_minor) #> [1] 0.6666667 ratio(hypersaturated_harmonic_minor) #> [1] 0.6666667  #### Sort all 12tet heptachords by brightness ratio heptas12 <- unique(apply(combn(12,7),2,primeform),MARGIN=2) hepta_ratios <- apply(heptas12, 2, ratio) sorted_heptas <- heptas12[,order(hepta_ratios)] colnames(sorted_heptas) <- apply(sorted_heptas,2,fortenum) sorted_heptas #>      7-1 7-35 7-34 7-32 7-30 7-22 7-19 7-17 7-15 7-29 7-28 7-20 7-12 7-38 7-27 #> [1,]   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0 #> [2,]   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 #> [3,]   2    3    3    3    2    2    2    2    2    2    3    2    2    2    2 #> [4,]   3    5    4    4    4    5    3    4    4    4    5    5    3    4    4 #> [5,]   4    6    6    6    6    6    6    5    6    6    6    6    4    5    5 #> [6,]   5    8    8    8    8    8    7    6    7    7    7    7    7    7    7 #> [7,]   6   10   10    9    9    9    9    9    8    9    9    9    9    8    9 #>      7-25 7-26 7-37 7-31 7-21 7-33 7-5 7-16 7-14 7-24 7-23 7-18 7-6 7-7 7-3 #> [1,]    0    0    0    0    0    0   0    0    0    0    0    0   0   0   0 #> [2,]    2    1    1    1    1    1   1    1    1    1    2    1   1   1   1 #> [3,]    3    3    3    3    2    2   2    2    2    2    3    4   2   2   2 #> [4,]    4    4    4    4    4    4   3    3    3    3    4    5   3   3   3 #> [5,]    6    5    5    6    5    6   5    5    5    5    5    6   4   6   4 #> [6,]    7    7    7    7    8    8   6    6    7    7    7    7   7   7   5 #> [7,]    9    9    8    9    9   10   7    9    8    9    9    9   8   8   8 #>      7-36 7-11 7-13 7-4 7-9 7-10 7-8 7-2 #> [1,]    0    0    0   0   0    0   0   0 #> [2,]    1    1    1   1   1    1   2   1 #> [3,]    2    3    2   2   2    2   3   2 #> [4,]    3    4    4   3   3    3   4   3 #> [5,]    5    5    5   4   4    4   5   4 #> [6,]    6    6    6   6   6    6   6   5 #> [7,]    8    8    8   7   8    9   8   7  #### Compare evenness to ratio for 12tet hetpachords plot(apply(heptas12, 2, evenness), hepta_ratios, xlab=\"Evenness\", ylab=\"Brightness Ratio\")"},{"path":"https://satbq.github.io/musicMCT/reference/evenness.html","id":null,"dir":"Reference","previous_headings":"","what":"How even is a scale? — evenness","title":"How even is a scale? — evenness","text":"Calculates Euclidean distance set nearest perfectly even division octave, one first entry 0, unlike almost every usage package. , purposes, want distinguish different modes set, seems counterintuitive say one mode scale less even another. Since value distance perfectly even (\"white\") scale, lower values indicate evenness.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/evenness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"How even is a scale? — evenness","text":"","code":"evenness(set, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/evenness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"How even is a scale? — evenness","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/evenness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"How even is a scale? — evenness","text":"Single non-negative numeric value","code":""},{"path":"https://satbq.github.io/musicMCT/reference/evenness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"How even is a scale? — evenness","text":"Note values function returns depend measurement unit using (.e. 12edo 16edo?). absolute value terribly significant, make relative comparisons calculations done value edo.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/evenness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"How even is a scale? — evenness","text":"","code":"evenness(c(0, 4, 8)) #> [1] 0 evenness(c(0, 4, 7)) < evenness(c(0,1,2)) #> [1] TRUE  dim_triad <- c(0,3,6) sus_2 <- c(0,2,7) coord_to_edo(dim_triad) #> [1]  0 -1 -2 coord_to_edo(sus_2) #> [1]  0 -2 -1 evenness(dim_triad) == evenness(sus_2) #> [1] TRUE"},{"path":"https://satbq.github.io/musicMCT/reference/fortenum.html","id":null,"dir":"Reference","previous_headings":"","what":"Forte number from set class — fortenum","title":"Forte number from set class — fortenum","text":"Given pitch-class set (12edo ), look Forte 1973's catalog number corresponding set class.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/fortenum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forte number from set class — fortenum","text":"","code":"fortenum(set)"},{"path":"https://satbq.github.io/musicMCT/reference/fortenum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forte number from set class — fortenum","text":"set Numeric vector pitch-classes set","code":""},{"path":"https://satbq.github.io/musicMCT/reference/fortenum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forte number from set class — fortenum","text":"Character string form n-x n number notes set x ordinal position Forte's list.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/fortenum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forte number from set class — fortenum","text":"","code":"fortenum(c(0,4,7)) #> [1] \"3-11\" fortenum(c(0,3,7)) #> [1] \"3-11\" fortenum(c(4,8,11)) #> [1] \"3-11\""},{"path":"https://satbq.github.io/musicMCT/reference/fortenums.html","id":null,"dir":"Reference","previous_headings":"","what":"Allen Forte's list of set classes — fortenums","title":"Allen Forte's list of set classes — fortenums","text":"compatibility music theory's traditional pitch-class set theory, whose landmark text Allen Forte's 1973 Structure Atonal Music, data set fortenums hardcodes ordinal positions 12-equal pitch-class set classes Allen Forte's list. allows us look specific set classes Forte numbers vice versa. sc() former fortenum() latter. little need ever interact file fortenums : able get anything need data either sc() fortenum(). Note primeform() musicMCT uses Rahn's algorithm rather Forte's finding canonical representative set class. Consequently, entries fortenums also use Rahn's prime forms rather Forte's.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/fortenums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allen Forte's list of set classes — fortenums","text":"","code":"fortenums"},{"path":"https://satbq.github.io/musicMCT/reference/fortenums.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Allen Forte's list of set classes — fortenums","text":"list length 12. nth entry list corresponds set classes cardinality n. list entry vector character strings; every element vector contains Rahn prime form comma-delimited string. prime forms ordered sequence Forte's list. Thus, instance, set class minor triad represented string \"0, 3, 7\", 11th element fortenums[[3]].","code":""},{"path":"https://satbq.github.io/musicMCT/reference/fortenums.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Allen Forte's list of set classes — fortenums","text":"Forte, Allen. 1973. Structure Atonal Music. New Haven, CT: Yale University Press. Appendix 1, pp. 179-181.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/fpunique.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique real values up to some tolerance — fpunique","title":"Unique real values up to some tolerance — fpunique","text":"Working scales continuous pitch space, many pitches intervals irrationals represented floating point numbers. can cause arithmetic rounding errors, leading looking like distinct pitches/intervals set really . Use fpunique rather base::unique() whenever handle scales continuous pitch space.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/fpunique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique real values up to some tolerance — fpunique","text":"","code":"fpunique(x, MARGIN = 0, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/fpunique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique real values up to some tolerance — fpunique","text":"x Numeric array whose unique elements determined MARGIN Numeric 0, 1, 2 depending whether want unique individual numbers, unique rows, unique columns, respectively. Defaults 0. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/fpunique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unique real values up to some tolerance — fpunique","text":"Numeric array unique elements (vector MARGIN 0; matrix otherwise)","code":""},{"path":"https://satbq.github.io/musicMCT/reference/fpunique.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unique real values up to some tolerance — fpunique","text":"Sometimes may need adjust tolerance (rounder) get correct results, especially done several operations row may introduced rounding errors.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/fpunique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unique real values up to some tolerance — fpunique","text":"","code":"just_dia <- 12 * log2(c(1, 9/8, 5/4, 4/3, 3/2, 5/3, 15/8)) intervals_in_just_dia <- sort(as.vector(sim(just_dia))) failed_unique_intervals <- unique(intervals_in_just_dia) fpunique_intervals <- fpunique(intervals_in_just_dia) length(failed_unique_intervals) #> [1] 36 length(fpunique_intervals) #> [1] 19"},{"path":"https://satbq.github.io/musicMCT/reference/get_relevant_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Which hyperplanes affect a specific generic interval? — get_relevant_rows","title":"Which hyperplanes affect a specific generic interval? — get_relevant_rows","text":"Given ineqmat (.e. matrix representing hyperplane arrangement), function tells us hyperplanes affect specific generic interval size. (One specific application step_signvector(), pays attention comparisons step sizes scale.)","code":""},{"path":"https://satbq.github.io/musicMCT/reference/get_relevant_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which hyperplanes affect a specific generic interval? — get_relevant_rows","text":"","code":"get_relevant_rows(generic_intervals, ineqmat)"},{"path":"https://satbq.github.io/musicMCT/reference/get_relevant_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which hyperplanes affect a specific generic interval? — get_relevant_rows","text":"generic_intervals vector one integers representing generic intervals can found within scale. Unisons 0, generic steps 1, etc. ineqmat matrix hyperplane normal vectors want search.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/get_relevant_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Which hyperplanes affect a specific generic interval? — get_relevant_rows","text":"Vector integers indicating relevant hyperplanes ineqmat","code":""},{"path":"https://satbq.github.io/musicMCT/reference/get_relevant_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Which hyperplanes affect a specific generic interval? — get_relevant_rows","text":"","code":"heptachord_ineqmat <- getineqmat(7) heptachord_step_comparisons <- get_relevant_rows(1, heptachord_ineqmat)  # Create an ineqmat that attends only to the quality of (024) trichordal # subsets in a heptachord. heptachord_triads <- get_relevant_rows(c(0,2,4), heptachord_ineqmat) triads_in_7_ineqmat <- heptachord_ineqmat[heptachord_triads,]  # Now, the following two heptachords have different colors # but the same pattern of (024) trichordal subsets, so their signvector # using triads_in_7_ineqmat is identical: heptachord_1 <- convert(c(0,1,3,6,8,12,13),17,12) heptachord_2 <- convert(c(0,1,3,5,7,10,11),14,12) colornum(heptachord_1) == colornum(heptachord_2) #> logical(0) sv_1 <- signvector(heptachord_1, ineqmat=triads_in_7_ineqmat) sv_2 <- signvector(heptachord_2, ineqmat=triads_in_7_ineqmat) isTRUE(all.equal(sv_1, sv_2)) #> [1] TRUE diatonicsubsets(c(0,2,4), heptachord_1, unique=FALSE) #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7] #> [1,] 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 #> [2,] 2.117647 3.529412 3.529412 4.235294 3.529412 3.529412 3.529412 #> [3,] 5.647059 7.764706 7.058824 7.764706 7.058824 5.647059 7.058824 diatonicsubsets(c(0,2,4), heptachord_2, unique=FALSE) #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7] #> [1,] 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 #> [2,] 2.571429 3.428571 3.428571 4.285714 3.428571 3.428571 3.428571 #> [3,] 6.000000 7.714286 6.857143 7.714286 6.857143 6.000000 6.857143 # Both have identical qualities for triads on scale degree 3, 5, and 7, # which you can see by comparing columns 3, 5, and 7 in the two # matrices above."},{"path":"https://satbq.github.io/musicMCT/reference/howfree.html","id":null,"dir":"Reference","previous_headings":"","what":"Count a scale's degrees of freedom — howfree","title":"Count a scale's degrees of freedom — howfree","text":"scalar structures can vary specific pitches much flexibly others retaining overall \"color.\" instance, meantone family diatonic scales generated line fifths can vary along one dimension: size generating fifth. literally defines line MCT geometry, scale moves line ceases structure diatonic scale. (Notably, stops non-degenerate well-formed.) contrast, 5-limit just diatonic scale defined two distinct parameters: size major third size perfect fifth. See \"Modal Color Theory,\" pp. 26-27, discussion.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/howfree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count a scale's degrees of freedom — howfree","text":"","code":"howfree(set, ineqmat = NULL, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/howfree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count a scale's degrees of freedom — howfree","text":"set Numeric vector pitch-classes set ineqmat Defaults NULL, case function assumes want use standard hyperplane arrangement MCT. can enter different matrix contains normal vectors hyperplane arrangement format standard ineqmats. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/howfree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count a scale's degrees of freedom — howfree","text":"Single nonnegative integer","code":""},{"path":"https://satbq.github.io/musicMCT/reference/howfree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count a scale's degrees of freedom — howfree","text":"","code":"c_natural_minor <- c(0,2,3,5,7,8,10) c_melodic_minor <- c(0,2,3,5,7,9,11) just_diatonic <- 12 * log2(c(1, 9/8, 5/4, 4/3, 3/2, 5/3, 15/8)) howfree(c_natural_minor) #> [1] 1 howfree(c_melodic_minor) #> [1] 1 howfree(just_diatonic) #> [1] 2"},{"path":"https://satbq.github.io/musicMCT/reference/ineqmats.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperplane arrangements for MCT spaces — ineqmats","title":"Hyperplane arrangements for MCT spaces — ineqmats","text":"data file ineqmats represents hyperplane arrangements core Modal Color Theory matrices containing hyperplanes' normal vectors. See Appendix 1.2 Sherrill (2025) discussion format matrices. matrices can generated fly makeineqmat(), large computations faster simply call precalculated data rather run makeineqmat() many thousands times. Thus object ineqmats saves inequality matrices scales cardinality 1-53, called upon getineqmat().","code":""},{"path":"https://satbq.github.io/musicMCT/reference/ineqmats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperplane arrangements for MCT spaces — ineqmats","text":"","code":"ineqmats"},{"path":"https://satbq.github.io/musicMCT/reference/ineqmats.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hyperplane arrangements for MCT spaces — ineqmats","text":"ineqmats list 53 entries. nth entry list gives inequality matrix n-note scales. inequality matrix m (n+1) matrix, m element OEIS A034828 (see Sherrill 2025, 40-42). last column matrix contains offset related whether generic intervals \"wrap around octave,\" e.g. third 7 2 heptachord. column linearly dependent previous n colums, contain coefficients hyperplane's normal vectors. , first row matrix (dropping last entry) normal vector first hyperplane arrangenemt, .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/ineqmats.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperplane arrangements for MCT spaces — ineqmats","text":"data ineqmats can recreated command sapply(2:53, makeineqmat) appending integer(0) first element list (case one-note scales pairwise interval comparisons therefore need matrix size 0).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/intervalspectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific sizes corresponding to each generic interval — intervalspectrum","title":"Specific sizes corresponding to each generic interval — intervalspectrum","text":"defined Clough Myerson 1986 (https://doi.org/10.1080/00029890.1986.11971924), \"interval spectrum\" list specific (\"chromatic\") intervals occur instances single generic (\"diatonic\") interval within reference scale. instance, usual diatonic scale, generic interval 1 (\"step\" scale) comes two specific sizes: 1 semitone 2 semitones. Therefore interval spectrum \\(\\langle 1 \\rangle = \\{ 1, 2 \\}\\). functions calculates spectrum every generic interval within set return either list specific values spectrum summary many distinct values .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/intervalspectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific sizes corresponding to each generic interval — intervalspectrum","text":"","code":"intervalspectrum(set, edo = 12, rounder = 10)  spectrumcount(set, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/intervalspectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific sizes corresponding to each generic interval — intervalspectrum","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/intervalspectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific sizes corresponding to each generic interval — intervalspectrum","text":"intervalspectrum returns list length one less length(set). nth entry list represents specific sizes generic interval n. spectrumcount returns vector reports length entry list (.e. number distinct specific intervals generic interval).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/intervalspectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specific sizes corresponding to each generic interval — intervalspectrum","text":"","code":"intervalspectrum(sc(7,35)) #> [[1]] #> [1] 1 2 #>  #> [[2]] #> [1] 3 4 #>  #> [[3]] #> [1] 5 6 #>  #> [[4]] #> [1] 6 7 #>  #> [[5]] #> [1] 8 9 #>  #> [[6]] #> [1] 10 11 #>  qcm_fifth <- meantone_fifth() qcm_dia <- sort(((0:6)*qcm_fifth)%%12) intervalspectrum(qcm_dia) #> [[1]] #> [1] 1.171079 1.931569 #>  #> [[2]] #> [1] 3.102647 3.863137 #>  #> [[3]] #> [1] 5.034216 5.794706 #>  #> [[4]] #> [1] 6.205294 6.965784 #>  #> [[5]] #> [1] 8.136863 8.897353 #>  #> [[6]] #> [1] 10.06843 10.82892 #>  just_dia <- 12 * log2(c(1, 9/8, 5/4, 4/3, 3/2, 5/3, 15/8)) intervalspectrum(just_dia) #> [[1]] #> [1] 1.117313 1.824037 2.039100 #>  #> [[2]] #> [1] 2.941350 3.156413 3.863137 #>  #> [[3]] #> [1] 4.980450 5.195513 5.902237 #>  #> [[4]] #> [1] 6.097763 6.804487 7.019550 #>  #> [[5]] #> [1] 8.136863 8.843587 9.058650 #>  #> [[6]] #> [1]  9.96090 10.17596 10.88269 #>   spectrumcount(just_dia) # The just diatonic scale is trivalent. #> [1] 3 3 3 3 3 3  # Melodic minor nearly has \"Myhill's Property\" except for its 3 sizes of fourth and fifth spectrumcount(sc(7,34))  #> [1] 2 2 3 3 2 2"},{"path":"https://satbq.github.io/musicMCT/reference/isgwf.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a scale n-wise well formed? — isgwf","title":"Is a scale n-wise well formed? — isgwf","text":"David Clampitt's 1997 dissertation (\"Pairwise Well-Formed Scales: Structural Transformational Properties,\" SUNY Buffalo) offers generalization notion well-formedness 1-dimensional structures single generator 2-dimensional structures mediate two well-formed scales. Ongoing research suggests can extended \"n-wise\" \"general\" well-formedness, though n-wise well-formed scales increasingly rare n grows larger.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/isgwf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a scale n-wise well formed? — isgwf","text":"","code":"isgwf(set, setword = NULL, allowdegen = FALSE, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/isgwf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a scale n-wise well formed? — isgwf","text":"set Numeric vector pitch-classes set setword vector representing ranked step sizes scale (e.g. c(2,2,1,2,2,2,1) diatonic). want test step word instead list pitch classes, set must entered NULL. allowdegen function test degenerate well-formed distributionally even scales ? Defaults FALSE. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/isgwf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a scale n-wise well formed? — isgwf","text":"Boolean: set n-wise well formed?","code":""},{"path":"https://satbq.github.io/musicMCT/reference/isgwf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a scale n-wise well formed? — isgwf","text":"","code":"meantone_diatonic <- c(0,2,4,5,7,9,11) just_diatonic <- 12 * log2(c(1, 9/8, 5/4, 4/3, 3/2, 5/3, 15/8)) some_weird_thing <- convert(c(0, 1, 3, 6, 8, 12, 14), 17, 12) example_scales <- cbind(meantone_diatonic, just_diatonic, some_weird_thing)  apply(example_scales, 2, howfree) #> meantone_diatonic     just_diatonic  some_weird_thing  #>                 1                 2                 3  apply(example_scales, 2, isgwf) #> meantone_diatonic     just_diatonic  some_weird_thing  #>              TRUE              TRUE              TRUE"},{"path":"https://satbq.github.io/musicMCT/reference/iswellformed.html","id":null,"dir":"Reference","previous_headings":"","what":"Well-formedness, Myhill's property, and/or moment of symmetry — iswellformed","title":"Well-formedness, Myhill's property, and/or moment of symmetry — iswellformed","text":"three concepts \"well-formedness,\" \"Myhill's property,\" \"moment symmetry\" refer nearly property scale, generalizing one important features familiar diatonic scale. See Clough, Engebretsen, Kochavi (1999, 77) (https://doi.org/10.2307/745921) useful discussion relationships. short, except edge cases, scale possesses properties generated copies single interval (Pythagorean diatonic generated ratio 3:2) copies generator belong generic interval (3:2 generator diatonic always corresponds \"fifth\" within scale). general, structure means generic intervals come 2 distinct sizes, definition \"Myhill's property.\" exception occurs generator manages produce perfectly even scale, e.g. whole tone scale generated 6 copies 1/6 octave. scale lacks Myhill's property Carey & Clampitt (1989, 200) (https://doi.org/10.2307/745935) call cases \"degenerate well-formed.\" Instead Myhill's property, scales 1 specific value intervalspectrum. Clough, Engebretsen, Kochavi define related concept, distributionally even scales, include hexatonic octatonic scales (Forte sc6-20 sc8-28). scales sense halfway \"degenerate\" \"non-degenerate well-formed\" interval spectra 1 element others 2. another perspective, distributionally even scales non-degenerate well formed period smaller octave (e.g. hexatonic scales 1-3 step pattern repeats every third octave). term \"moment symmetry\" refers non-degenerate well-formed scales coined Erv Wilson 1975 (cited Clough, Engebretsen, Kochavi). tends widely used microtonal music theory, e.g. https://en.xen.wiki/w/MOS_scale. Scales property considerably interesting voice-leading properties important landmarks geometry MCT. See \"Modal Color Theory,\" pp. 14, 17, 29, 33-34, 36-37. substantial portion MCT amounts attempt generalize ideas developed MOS/NDWF scales scale structures.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/iswellformed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Well-formedness, Myhill's property, and/or moment of symmetry — iswellformed","text":"","code":"iswellformed(set, setword = NULL, allowdegen = FALSE, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/iswellformed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Well-formedness, Myhill's property, and/or moment of symmetry — iswellformed","text":"set Numeric vector pitch-classes set setword vector representing ranked step sizes scale (e.g. c(2,2,1,2,2,2,1) diatonic). want test step word instead list pitch classes, set must entered NULL. allowdegen function test degenerate well-formed distributionally even scales ? Defaults FALSE. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/iswellformed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Well-formedness, Myhill's property, and/or moment of symmetry — iswellformed","text":"Boolean answering \"scale MOS?\" (allowedegen=FALSE) \"scale well-formed sense?\" (allowdegen=TRUE).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/iswellformed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Well-formedness, Myhill's property, and/or moment of symmetry — iswellformed","text":"","code":"iswellformed(sc(7,35)) #> [1] TRUE iswellformed(c(0,2,4,6)) #> [1] TRUE iswellformed(c(0,1,6,7)) #> [1] FALSE iswellformed(c(0,1,6,7), allowdegen=TRUE) #> [1] TRUE iswellformed(NULL, setword=c(2,2,1,2,1,2,1)) #> [1] TRUE"},{"path":"https://satbq.github.io/musicMCT/reference/isym.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for inversional symmetry — isym","title":"Test for inversional symmetry — isym","text":"pc-set inversionally symmetrical? , map onto \\(T_n \\) appropriate \\(n\\)? evaluated asking whether, appropriate rotations, step-interval series given set equal step-interval series set's inversion. designed work sets continuous pc-space, just integers mod k. usual working real values, depends rounding tolerance (rounder).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/isym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for inversional symmetry — isym","text":"","code":"isym(set, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/isym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for inversional symmetry — isym","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/isym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for inversional symmetry — isym","text":"TRUE set inversionally symmetrical, FALSE otherwise","code":""},{"path":"https://satbq.github.io/musicMCT/reference/isym.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for inversional symmetry — isym","text":"Note calculates abstract pitch-class symmetry, potential symmetry pitch space. (See second example.)","code":""},{"path":"https://satbq.github.io/musicMCT/reference/isym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for inversional symmetry — isym","text":"","code":"#### Mod 12 isym(c(0, 1, 5, 8)) #> [1] TRUE isym(c(0, 2, 4, 8)) #> [1] TRUE  #### Continuous Values qcm_fifth <- meantone_fifth() qcm_dia <- sort(((0:6)*qcm_fifth)%%12) just_dia <- 12 * log2(c(1, 9/8, 5/4, 4/3, 3/2, 5/3, 15/8)) isym(qcm_dia) #> [1] TRUE isym(just_dia) #> [1] FALSE  #### Rounding matters: isym(qcm_dia, rounder=15) #> [1] FALSE"},{"path":"https://satbq.github.io/musicMCT/reference/ivec.html","id":null,"dir":"Reference","previous_headings":"","what":"Interval-class vector — ivec","title":"Interval-class vector — ivec","text":"classic summary set's dyadic subset content pitch-class set theory. name ivec short interval-calss vector.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/ivec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interval-class vector — ivec","text":"","code":"ivec(set, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/ivec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interval-class vector — ivec","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/ivec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interval-class vector — ivec","text":"Numeric vector length floor(edo/2)","code":""},{"path":"https://satbq.github.io/musicMCT/reference/ivec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interval-class vector — ivec","text":"","code":"ivec(c(0,1,4,6)) #> [1] 1 1 1 1 1 1 ivec(c(0,1,3,7)) #> [1] 1 1 1 1 1 1  #### Z-related sextuple in 24edo: sextuple <- matrix(   c(0, 1, 2, 6, 8, 10, 13, 16,   0, 1, 3, 7, 9, 11, 12, 17,   0, 1, 6, 8, 10, 13, 14, 16,   0, 1, 7, 9, 11, 12, 15, 17,   0, 1, 2, 4, 8, 10, 13, 18,   0, 2, 3, 4, 8, 10, 15, 18), nrow=6, byrow=TRUE) apply(sextuple, 1, ivec, edo=24) # The ic-vectors are the 6 identical columns of the output matrix #>       [,1] [,2] [,3] [,4] [,5] [,6] #>  [1,]    2    2    2    2    2    2 #>  [2,]    3    3    3    3    3    3 #>  [3,]    2    2    2    2    2    2 #>  [4,]    2    2    2    2    2    2 #>  [5,]    2    2    2    2    2    2 #>  [6,]    3    3    3    3    3    3 #>  [7,]    2    2    2    2    2    2 #>  [8,]    4    4    4    4    4    4 #>  [9,]    2    2    2    2    2    2 #> [10,]    3    3    3    3    3    3 #> [11,]    2    2    2    2    2    2 #> [12,]    1    1    1    1    1    1"},{"path":"https://satbq.github.io/musicMCT/reference/j.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenient just-intonation intervals and scales — j","title":"Convenient just-intonation intervals and scales — j","text":"hard define just interval frequency ratio: requires input like 12*log2(freq_ratio). gets pretty tiresome lot, though, convenience musicMCT includes j function (related Clough Douthett's J function wishes ). j designed behave lot like base R's c() way use define scale (see examples ). inputs can take limited hard-coded, since systematic way define shorthands every potential just interval. general, logic individual digits refer major intervals tonic 5-limit just diatonic scale. prefix \"m\" number (e.g. \"m3\") gives equivalent minor version interval. just want entire 5-limit diatonic, can enter \"dia\".","code":""},{"path":"https://satbq.github.io/musicMCT/reference/j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenient just-intonation intervals and scales — j","text":"","code":"j(..., edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenient just-intonation intervals and scales — j","text":"... One names matched just intervals. can enter strings, convenience sake needn't. currently accepted inputs, meaning, return value: 1: perfect 1th (0 semitones) u: unison (0 semitones) synt: syntonic comma (~.215 semitones) pyth: Pythagorean comma (~.235 semitones) l: Pythagorean limma (256:243 ~.9 semitones) s: 5-limit just semitone (16:15 ~1.12 semitones) st: 5-limit just semitone (16:15 ~1.12 semitones) m2: 5-limit just semitone (16:15 ~1.12 semitones) h: 5-limit just semitone (16:15 ~1.12 semitones) : Pythagorean apotome (2187:2048 ~1.14 semitones) mt: 5-limit minor tone (10:9 ~1.82 semitones) 2: 3-limit whole tone (9:8 ~2.04 semitones) t: 3-limit whole tone (9:8 ~2.04 semitones) w: 3-limit whole tone (9:8 ~2.04 semitones) sept: 7-limit whole tone (8:7 ~2.31 semitones) m3: 5-limit minor third (6:5 ~3.16 semitones) 3: 5-limit major third (5:4 ~3.86 semitones) M3: 5-limit major third (5:4 ~3.86 semitones) 4: 3-limit perfect fourth (4:3 ~4.98 semitones) utt: 11-limit tritone (11:8 ~5.51 semitones) stt: 7-limit tritone (7:5 ~5.83 semitones) jtt: 5-limit (45:32 ~5.90 semitones) utt: 11-limit tritone (11:8 ~5.51 semitones) 5: 3-limit perfect fifth (3:2 ~7.02 semitones) m6: 5-limit minor sixth (8:5 ~8.14 semitones) 6: 5-limit major sixth (5:3 ~8.84 semitones) m7: 5-limit minor seventh (9:5 ~10.18 semitones) 7: 5-limit major seventh (16:15 ~10.88 semitones) 8: 2-limit perfect octave (2:1 12 semitones) dia: complete 5-limit diatonic scale edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenient just-intonation intervals and scales — j","text":"Numeric vector representing input just intervals converted edo unit steps per octave","code":""},{"path":"https://satbq.github.io/musicMCT/reference/j.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenient just-intonation intervals and scales — j","text":"","code":"major_triad <- j(1,3,5) isTRUE(all.equal(major_triad, j(u, M3, \"5\"))) #> [1] TRUE  isTRUE(all.equal(j(dia), j(1,2,3,4,5,6,7))) #> [1] TRUE  # How far is the twelve-equal major scale from the 5-limit just diatonic? dist(rbind(c(0,2,4,5,7,9,11), j(dia))) #>           1 #> 2 0.2434172  # Is 53-equal temperament a good approximation of the 5-limit just diatonic? j(dia, edo=53) #> [1]  0.000000  9.006025 17.062189 21.996987 31.003013 39.059176 48.065202"},{"path":"https://satbq.github.io/musicMCT/reference/makeMEscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximally even scales — makeMEscale","title":"Maximally even scales — makeMEscale","text":"Scales \"maximally even\" divisions equal-tempered universe several musically interesting properties. maximally even scale number notes (card) coprime size equal-tempered universe, maximally even scale called \"non-degenerate well-formed\" \"moment symmetry\" scale. size divides equal temperament, perfectly even scale. neither coprime divisor, produces scale structure like octatonic (.e. union perfectly even scales, well-formed scale period smaller octave). scale generated quantizing perfectly even scale chosen chromatic cardinality. Two quantization options offered (rounding rounding nearest value).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/makeMEscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximally even scales — makeMEscale","text":"","code":"makeMEscale(card, edo = 12, floor = TRUE)"},{"path":"https://satbq.github.io/musicMCT/reference/makeMEscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximally even scales — makeMEscale","text":"card Number notes scale. Numeric. edo Number unit steps octave. Defaults 12. floor Boolean determining quantize. Defaults TRUE causing quantization round . FALSE rounds nearest value.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/makeMEscale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximally even scales — makeMEscale","text":"Numeric vector length card representing scale card notes.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/makeMEscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximally even scales — makeMEscale","text":"","code":"makeMEscale(7, 12) #> [1]  0  1  3  5  6  8 10 makeMEscale(7, 12, floor=FALSE) #> [1]  0  1  3  5  6  8 10 diatonic_in_19 <- makeMEscale(7, 19) tresillo <- makeMEscale(3,8)"},{"path":"https://satbq.github.io/musicMCT/reference/makeineqmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the hyperplanes for the MCT arrangement of any cardinality — makeineqmat","title":"Define the hyperplanes for the MCT arrangement of any cardinality — makeineqmat","text":"described Appendix 1.2 \"Modal Color Theory,\" information defining hyperplane arrangements stored matrix containing hyperplanes' normal vectors rows. (matrices correspond ultimately intervallic inequalities define MCT geometry, package refers ineqmats, sometimes individual hyerplanes ineqs.) already computed stored data package (ineqmats) cardinalities 53, can recreated scratch makeineqmat. might useful reason need deal huge scale therefore want use arrangement whose matrix already saved. Note call like makeineqmat(60) may take dozen seconds run (sizes large, arrangement terribly complex, ~17K distinct hyperplanes). getineqmat tests whether matrix already exists desired cardinality. , retrieved; , created using makeineqmat.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/makeineqmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the hyperplanes for the MCT arrangement of any cardinality — makeineqmat","text":"","code":"makeineqmat(card)  getineqmat(card)"},{"path":"https://satbq.github.io/musicMCT/reference/makeineqmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define the hyperplanes for the MCT arrangement of any cardinality — makeineqmat","text":"card cardinality scale(s) studied","code":""},{"path":"https://satbq.github.io/musicMCT/reference/makeineqmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define the hyperplanes for the MCT arrangement of any cardinality — makeineqmat","text":"matrix card+1 columns roughly card^(3)/8 rows","code":""},{"path":"https://satbq.github.io/musicMCT/reference/makeineqmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define the hyperplanes for the MCT arrangement of any cardinality — makeineqmat","text":"","code":"makeineqmat(2) # Cute: is step 1 > step 2? #> [1] -2  2 -1 makeineqmat(3) # Cute: step 1 > step 2? step 1 > step 3? step 2 > step 3? #>      [,1] [,2] [,3] [,4] #> [1,]   -1    2   -1    0 #> [2,]   -2    1    1   -1 #> [3,]   -1   -1    2   -1 makeineqmat(7) # Okay... #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #>  [1,]   -1    2   -1    0    0    0    0    0 #>  [2,]   -1    1    1   -1    0    0    0    0 #>  [3,]    0   -1    2   -1    0    0    0    0 #>  [4,]   -1    1    0    1   -1    0    0    0 #>  [5,]    0   -1    1    1   -1    0    0    0 #>  [6,]    0    0   -1    2   -1    0    0    0 #>  [7,]   -1    1    0    0    1   -1    0    0 #>  [8,]    0   -1    1    0    1   -1    0    0 #>  [9,]    0    0   -1    1    1   -1    0    0 #> [10,]    0    0    0   -1    2   -1    0    0 #> [11,]   -1    1    0    0    0    1   -1    0 #> [12,]    0   -1    1    0    0    1   -1    0 #> [13,]    0    0   -1    1    0    1   -1    0 #> [14,]    0    0    0   -1    1    1   -1    0 #> [15,]    0    0    0    0   -1    2   -1    0 #> [16,]   -2    1    0    0    0    0    1   -1 #> [17,]   -1   -1    1    0    0    0    1   -1 #> [18,]   -1    0   -1    1    0    0    1   -1 #> [19,]   -1    0    0   -1    1    0    1   -1 #> [20,]   -1    0    0    0   -1    1    1   -1 #> [21,]   -1    0    0    0    0   -1    2   -1 #> [22,]   -1    0    2    0   -1    0    0    0 #> [23,]   -1    0    1    1    0   -1    0    0 #> [24,]    0   -1    0    2    0   -1    0    0 #> [25,]   -1    0    1    0    1    0   -1    0 #> [26,]    0   -1    0    1    1    0   -1    0 #> [27,]    0    0   -1    0    2    0   -1    0 #> [28,]   -2    0    1    0    0    1    0   -1 #> [29,]   -1   -1    0    1    0    1    0   -1 #> [30,]   -1    0   -1    0    1    1    0   -1 #> [31,]   -1    0    0   -1    0    2    0   -1 #> [32,]    0   -2    0    1    0    0    1   -1 #> [33,]    0   -1   -1    0    1    0    1   -1 #> [34,]    0   -1    0   -1    0    1    1   -1 #> [35,]    0   -1    0    0   -1    0    2   -1 #> [36,]   -1    0    0    2    0    0   -1    0 #> [37,]   -2    0    0    1    1    0    0   -1 #> [38,]   -1   -1    0    0    2    0    0   -1 #> [39,]    0   -2    0    0    1    1    0   -1 #> [40,]    0   -1   -1    0    0    2    0   -1 #> [41,]    0    0   -2    0    0    1    1   -1 #> [42,]    0    0   -1   -1    0    0    2   -1 ineqmat20 <- makeineqmat(20) dim(ineqmat20) # Yikes! #> [1] 1000   21"},{"path":"https://satbq.github.io/musicMCT/reference/meantone_fifth.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a tempered fifth for various meantone scales — meantone_fifth","title":"Define a tempered fifth for various meantone scales — meantone_fifth","text":"Creates interval approximates pure 3:2 fifth tempered smaller fraction syntonic comma, making easy construct diatonic meantone scales. default create quarter-comma meantone fifth (.e. 697 cents).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/meantone_fifth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a tempered fifth for various meantone scales — meantone_fifth","text":"","code":"meantone_fifth(frac = 1/4)"},{"path":"https://satbq.github.io/musicMCT/reference/meantone_fifth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a tempered fifth for various meantone scales — meantone_fifth","text":"frac fraction syntonic comma fifth tempered . Defaults 1/4. Numeric.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/meantone_fifth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a tempered fifth for various meantone scales — meantone_fifth","text":"Single numeric value tempered fifth measured 12edo semitones.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/meantone_fifth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a tempered fifth for various meantone scales — meantone_fifth","text":"","code":"zarlino_fifth <- meantone_fifth(2/7) zarlino_diatonic <- sort((0:6 * zarlino_fifth) %% 12) print(zarlino_diatonic) #> [1]  0.000000  1.916207  3.832414  5.748621  6.958103  8.874310 10.790517  fifth_in_19edo <- convert(11, 19, 12) meantone_fifth(1/3) - fifth_in_19edo #> [1] 0.0004939556"},{"path":"https://satbq.github.io/musicMCT/reference/minimizeVL.html","id":null,"dir":"Reference","previous_headings":"","what":"Smallest voice leading between two sets — minimizeVL","title":"Smallest voice leading between two sets — minimizeVL","text":"Given source set goal move , find \"strongly crossing-free\" voice leading source goal smallest size.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/minimizeVL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smallest voice leading between two sets — minimizeVL","text":"","code":"minimizeVL(source, goal, method = \"taxicab\", no_ties = FALSE, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/minimizeVL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smallest voice leading between two sets — minimizeVL","text":"source Numeric vector, pitch-class set start voice leading goal Numeric vector, pitch-class set end voice leading method distance metric used? Defaults \"taxicab\" can \"euclidean\". no_ties multiple VLs equally small, one returned? Defaults FALSE, generally human user want. functions call minimize_VL need TRUE predictable shapes returned value. edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/minimizeVL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smallest voice leading between two sets — minimizeVL","text":"Numeric array. cases, vector length source; vector NA length source goal source different lengths. no_ties=FALSE multiple voice leadings equivalent, array can matrix m rows m number equally small voice leadings.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/minimizeVL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smallest voice leading between two sets — minimizeVL","text":"","code":"c_major <- c(0,4,7) ab_minor <- c(8,11,3) minimizeVL(c_major, ab_minor) #> [1] -1 -1  1  diatonic_scale <- c(0,2,4,5,7,9,11) minimizeVL(diatonic_scale, tn(diatonic_scale, 7)) #> [1] 0 0 0 1 0 0 0  d_major <- c(2,6,9) minimizeVL(c_major, d_major) #>      [,1] [,2] [,3] #> [1,]    2    2    2 #> [2,]   -3   -2   -1 minimizeVL(c_major, d_major, no_ties=TRUE) #> [1] 2 2 2 minimizeVL(c_major, d_major, method=\"euclidean\", no_ties=FALSE) #> [1] 2 2 2  minimizeVL(c(0,4,7,10),c(7,7,11,2),method=\"euclidean\") #>      [,1] [,2] [,3] [,4] #> [1,]   -1   -2    0   -3 #> [2,]    2    3    0    1 minimizeVL(c(0,4,7,10),c(7,7,11,2),method=\"euclidean\", no_ties=TRUE) #> [1] -1 -2  0 -3"},{"path":"https://satbq.github.io/musicMCT/reference/primeform.html","id":null,"dir":"Reference","previous_headings":"","what":"Prime form of a set using Rahn's algorithm — primeform","title":"Prime form of a set using Rahn's algorithm — primeform","text":"Takes set (order, inversion, transposition) returns canonical (\"prime\") form represents \\(T_n /T_n \\)-type set belongs. Uses algorithm Rahn 1980 rather Forte 1973.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/primeform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prime form of a set using Rahn's algorithm — primeform","text":"","code":"primeform(set, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/primeform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prime form of a set using Rahn's algorithm — primeform","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/primeform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prime form of a set using Rahn's algorithm — primeform","text":"Numeric vector length set","code":""},{"path":"https://satbq.github.io/musicMCT/reference/primeform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prime form of a set using Rahn's algorithm — primeform","text":"principle work sets continous pitch-class space, just mod k universe. watch rounding errors: can manage work integer values, probably safer. Otherwise, try rounding set various decimal places test consistency result.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/primeform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prime form of a set using Rahn's algorithm — primeform","text":"","code":"primeform(c(0, 3, 4, 8)) #> [1] 0 1 4 8 primeform(c(0, 1, 3, 7, 8)) #> [1] 0 1 5 6 8 primeform(c(0, 3, 6, 9, 12, 14), edo=16) #> [1]  0  2  4  7 10 13"},{"path":"https://satbq.github.io/musicMCT/reference/quantize_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a scale mod k that matches a given color — quantize_color","title":"Find a scale mod k that matches a given color — quantize_color","text":"Modal Color Theory useful analyzing scales continuous pitch-class space irrational values, sometimes irrational values can inconvenient work . Therefore often quite useful find scale color one studying, can represented integers mod k universe. See \"Modal Color Theory,\" 27.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/quantize_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a scale mod k that matches a given color — quantize_color","text":"","code":"quantize_color(   set,   nmax = 12,   reconvert = FALSE,   ineqmat = NULL,   edo = 12,   rounder = 10 )"},{"path":"https://satbq.github.io/musicMCT/reference/quantize_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a scale mod k that matches a given color — quantize_color","text":"set Numeric vector pitch-classes set nmax Integer, essentially limit far function search giving . Although every real color rational representation mod k universe, colors k must high. Increasing nmax makes function run longer might necessary small chromatic universes produce result. Defaults 12. reconvert Boolean. scale converted 12edo? Defaults FALSE. ineqmat Defaults NULL, case function assumes want use standard hyperplane arrangement MCT. can enter different matrix contains normal vectors hyperplane arrangement format standard ineqmats. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/quantize_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a scale mod k that matches a given color — quantize_color","text":"reconvert=FALSE, list two elements: element 1 set vector integers representing quantized scale; element 2 edo representing number k unit steps mod k universe. reconvert=TRUE, returns single numeric vector measured relative unit step size input edo: generally integers. May also return vector NAs length set suitable quantization found beneath limit given nmax.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/quantize_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a scale mod k that matches a given color — quantize_color","text":"","code":"qcm_fifth <- meantone_fifth() qcm_lydian <- sort(((0:6)*qcm_fifth)%%12) quantize_color(qcm_lydian) #> $set #> [1]  0  2  4  6  7  9 11 #>  #> $edo #> [1] 12 #>   # Let's approximate the Werckmeister III well-temperament werck_ratios <- c(1, 256/243, 64*sqrt(2)/81, 32/27, (256/243)*2^(1/4), 4/3,    1024/729, (8/9)*2^(3/4), 128/81, (1024/729)*2^(1/4), 16/9, (128/81)*2^(1/4)) werck3 <- 12 * log2(werck_ratios) quantize_color(werck3) #> $set #>  [1]  0  1  4  7  9 13 14 18 20 22 26 28 #>  #> $edo #> [1] 32 #>  quantize_color(werck3, reconvert=TRUE) #>  [1]  0.000  0.375  1.500  2.625  3.375  4.875  5.250  6.750  7.500  8.250 #> [11]  9.750 10.500"},{"path":"https://satbq.github.io/musicMCT/reference/readSCL.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a Scala (.scl) file as a scale — readSCL","title":"Import a Scala (.scl) file as a scale — readSCL","text":"function allows import scales defined Scala tuning format (*.scl) R analyze functions musicMCT. Scales can defined .scl files different ways, may lack precision computations musicMCT normally assume. import scale seems less regularity expected (.e. 0 hyperplanes even though seems regular), try increasing rounding tolerance (.e. lower value rounder arguments functions apply imported scale).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/readSCL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a Scala (.scl) file as a scale — readSCL","text":"","code":"readSCL(filename, scaleonly = TRUE, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/readSCL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a Scala (.scl) file as a scale — readSCL","text":"filename String path file imported scaleonly Boolean: readSCL return vector pitches, additional information file? Defaults TRUE edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/readSCL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a Scala (.scl) file as a scale — readSCL","text":"numeric vector scale's pitches scaleonly=TRUE; else list scale's pitches first entry, length scale second, size period third.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/readSCL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a Scala (.scl) file as a scale — readSCL","text":"","code":"# We'll read a sample .scl file that comes with the `musicMCT` package. demo_filepath <- system.file(\"extdata\", \"sample_pentachord.scl\", package=\"musicMCT\") fun_pentachord <- readSCL(demo_filepath) sim(fun_pentachord) #>      [,1] [,2]  [,3] [,4]  [,5] #> [1,] 0.00 0.00  0.00 0.00  0.00 #> [2,] 2.40 0.90  3.15 1.65  3.90 #> [3,] 3.30 4.05  4.80 5.55  6.30 #> [4,] 6.45 5.70  8.70 7.95  7.20 #> [5,] 8.10 9.60 11.10 8.85 10.35 brightnessgraph(fun_pentachord)"},{"path":"https://satbq.github.io/musicMCT/reference/realize_setword.html","id":null,"dir":"Reference","previous_headings":"","what":"Define scale by entering its relative step sizes — realize_setword","title":"Define scale by entering its relative step sizes — realize_setword","text":"asword() takes scale ranked list step sizes, realize_setword opposite: given list ranked step sizes, defines scale steps. attempt define scale exists 12-tone equal temperament another mod k universe, though result integral values mod k setting. want information, set reconvert FALSE.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/realize_setword.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define scale by entering its relative step sizes — realize_setword","text":"","code":"realize_setword(setword, edo = 12, reconvert = TRUE)"},{"path":"https://satbq.github.io/musicMCT/reference/realize_setword.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define scale by entering its relative step sizes — realize_setword","text":"setword numeric vector (intended nonnegative integers) ranked step sizes; length desired output set. edo Number unit steps octave. Defaults 12. reconvert Boolean. result expressed measured terms semitones (different mod k step edo set 12)?","code":""},{"path":"https://satbq.github.io/musicMCT/reference/realize_setword.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define scale by entering its relative step sizes — realize_setword","text":"Numeric vector length set, reconvert TRUE. reconvert FALSE, returns list two elements. first element (set) expresses defined set integer values edo. second element (edo) tells edo (mod k universe) set defined .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/realize_setword.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define scale by entering its relative step sizes — realize_setword","text":"","code":"dim7 <- realize_setword(c(1,1,1,1)) four_on_the_floor <- realize_setword(c(1,1,1,1), edo=16) my_luggage <- realize_setword(c(1,2,3,4,5)) my_luggage_in_15edo <- realize_setword(c(1,2,3,4,5),reconvert=FALSE) dim7 #> [1] 0 3 6 9 four_on_the_floor #> [1]  0  4  8 12 my_luggage #> [1] 0.0 0.8 2.4 4.8 8.0 my_luggage_in_15edo #> $set #> [1]  0  1  3  6 10 #>  #> $edo #> [1] 15 #>   pwf_scale <- realize_setword(c(3,2,1,3,2,3,1)) asword(pwf_scale) #> [1] 3 2 1 3 2 3 1"},{"path":"https://satbq.github.io/musicMCT/reference/rotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Circular rotation of an ordered tuple — rotate","title":"Circular rotation of an ordered tuple — rotate","text":"Changes element circularly-ordered series first position without otherwise changing order. Used primarily generate modes scale. Single application moves one element beginning tuple end.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/rotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Circular rotation of an ordered tuple — rotate","text":"","code":"rotate(x, n = 1, transpose_up = FALSE, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/rotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Circular rotation of an ordered tuple — rotate","text":"x Vector rotated n Number positions vector rotated left. Defaults 1. May negative. transpose_up Boolean, defaults FALSE leaves entires unchanged. set TRUE, elements moved head tail vector increased value edo. edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/rotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Circular rotation of an ordered tuple — rotate","text":"(Rotated) vector length x","code":""},{"path":"https://satbq.github.io/musicMCT/reference/rotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Circular rotation of an ordered tuple — rotate","text":"","code":"rotate(c(0, 2, 4, 5, 7, 9, 11), n=2) #> [1]  4  5  7  9 11  0  2 rotate(c(0, 2, 4, 5, 7, 9, 11), n=-2) #> [1]  9 11  0  2  4  5  7 rotate(c(0, 2, 4, 5, 7, 9, 11), n=2, transpose_up=TRUE) #> [1]  4  5  7  9 11 12 14 rotate(c(0, 2, 4, 5, 7, 9, 11), n=2, transpose_up=TRUE, edo=15) #> [1]  4  5  7  9 11 15 17 rotate(c(\"father\", \"charles\", \"goes\", \"down\", \"and\", \"ends\", \"battle\"),   n=4) #> [1] \"and\"     \"ends\"    \"battle\"  \"father\"  \"charles\" \"goes\"    \"down\""},{"path":"https://satbq.github.io/musicMCT/reference/saturate.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify evenness without changing hue — saturate","title":"Modify evenness without changing hue — saturate","text":"central concepts visual conceit \"Modal Color Theory,\" classfiying scales different levels granularity according voice-leading properties. See \"Modal Color Theory,\" 19-23. Saturation paramterizes scale structures along single degree freedom corresponds size vector \"white\" perfectly even scale set question. Variation scale's saturation minimally affects scale's structural properties. function saturate takes scale saturation parameter (r) returns another scale along line (.e. including scale's hue scalar involution–see \"Modal Color Theory,\" 32).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/saturate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify evenness without changing hue — saturate","text":"","code":"saturate(r, set, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/saturate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify evenness without changing hue — saturate","text":"r Numeric: relative proportion (de)saturate set . r set 0, returns white; r = 1, returns input set. 0 < r < 1, saturation decreased. r > 1, saturation increased, potentially point set moves past OPTIC boundary. r < 0, result \"involution\" set. set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/saturate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify evenness without changing hue — saturate","text":"saturate returns another scale (numeric vector length set).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/saturate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify evenness without changing hue — saturate","text":"","code":"lydian <- c(0,2,4,6,7,9,11) qcm_fifth <- meantone_fifth() qcm_dia <- sort(((0:6)*qcm_fifth)%%12) evenness_ratio <- evenness(qcm_dia) / evenness(lydian) desaturated_lydian <- saturate(evenness_ratio, lydian) desaturated_lydian #> [1]  0.000000  1.931569  3.863137  5.794706  6.965784  8.897353 10.828921 qcm_dia #> [1]  0.000000  1.931569  3.863137  5.794706  6.965784  8.897353 10.828921  ionian <- c(0,2,4,5,7,9,11) involution_of_ionian <- saturate(-2, ionian) convert(involution_of_ionian, 12, 42) #> [1]  0  4  8 19 23 27 31 asword(ionian) #> [1] 2 2 1 2 2 2 1 asword(involution_of_ionian) #> [1] 1 1 2 1 1 1 2"},{"path":"https://satbq.github.io/musicMCT/reference/sc.html","id":null,"dir":"Reference","previous_headings":"","what":"Set class from Forte's list — sc","title":"Set class from Forte's list — sc","text":"Given cardinality ordinal position, returns (Rahn) prime form set class Allen Forte's list Structure Atonal Music (1973). Draws information hard-coded values package's data.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/sc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set class from Forte's list — sc","text":"","code":"sc(card, num)"},{"path":"https://satbq.github.io/musicMCT/reference/sc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set class from Forte's list — sc","text":"card Integer value 1 12 (inclusive) indicates number distinct pitch-classes set class. num Ordinal number desired set class Forte's list","code":""},{"path":"https://satbq.github.io/musicMCT/reference/sc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set class from Forte's list — sc","text":"Numeric vector length card representing pc-set card notes.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/sc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set class from Forte's list — sc","text":"","code":"ait1 <- sc(4,15) ait2 <- sc(4,29) NB_rahn_prime_form <- sc(6,31) print(NB_rahn_prime_form) #> [1] 0 1 4 5 7 9"},{"path":"https://satbq.github.io/musicMCT/reference/scComp.html","id":null,"dir":"Reference","previous_headings":"","what":"Set class complement — scComp","title":"Set class complement — scComp","text":"Find complement set class given mod k universe. Complements traditionally recognized pitch-class set theory sharing many properties . true extent considering scales continuous pc-space, sometimes ! Therefore whenever exploring odd property scale , can useful check scale's complement (come across scale mod k context, course).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/scComp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set class complement — scComp","text":"","code":"scComp(set, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/scComp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set class complement — scComp","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/scComp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set class complement — scComp","text":"Numeric vector representing set length edo - n n length input set","code":""},{"path":"https://satbq.github.io/musicMCT/reference/scComp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set class complement — scComp","text":"","code":"diatonic19 <- c(0, 3, 6, 9, 11, 14, 17) chromatic19 <- scComp(diatonic19, edo=19) icvecs_19 <- rbind(ivec(diatonic19, edo=19), ivec(chromatic19, edo=19)) rownames(icvecs_19) <- c(\"diatonic ivec\", \"chromatic ivec\") icvecs_19 #>                [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> diatonic ivec     0    2    5    0    4    3    0    6    1 #> chromatic ivec    5    7   10    5    9    8    5   11    6"},{"path":"https://satbq.github.io/musicMCT/reference/set_from_signvector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a scale from a sign vector — set_from_signvector","title":"Create a scale from a sign vector — set_from_signvector","text":"function attempts take sign vector (associated cardinality ineqmat) create scale whose sign vector matches input. always possible sign vectors correspond colors actually exist (just like Fortean set class interval-class vector <1 1 0 1 0 0>). function best may eventually time , using similar process quantize_color(). can increase search time increasing nmax, cases search forever still find nothing. advise trying use function many sign vectors time.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/set_from_signvector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a scale from a sign vector — set_from_signvector","text":"","code":"set_from_signvector(   signvec,   card,   nmax = 12,   reconvert = FALSE,   ineqmat = NULL,   edo = 12,   rounder = 10 )"},{"path":"https://satbq.github.io/musicMCT/reference/set_from_signvector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a scale from a sign vector — set_from_signvector","text":"signvec Vector 0, -1, 1s: sign vector want realize. card Integer: number notes desired scale. nmax Integer, essentially limit far function search giving . Although every real color rational representation mod k universe, colors k must high. Increasing nmax makes function run longer might necessary small chromatic universes produce result. Defaults 12. reconvert Boolean. scale converted 12edo? Defaults FALSE. ineqmat Defaults NULL, case function assumes want use standard hyperplane arrangement MCT. can enter different matrix contains normal vectors hyperplane arrangement format standard ineqmats. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/set_from_signvector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a scale from a sign vector — set_from_signvector","text":"reconvert=FALSE, list two elements: element 1 set vector integers representing realized scale; element 2 edo representing number k unit steps mod k universe. reconvert=TRUE, returns single numeric vector converted measurement relative 12-tone equal tempered semitones. May also return vector NAs length card suitable scale found beneath limit given nmax.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/set_from_signvector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a scale from a sign vector — set_from_signvector","text":"","code":"# This first command produces a real tetrachord: set_from_signvector(c(-1, 1, 1, -1, -1, -1, 0, -1), 4) #> $set #> [1] 0 2 5 6 #>  #> $edo #> [1] 10 #>   # But this one, which changes only the last entry of the previous sign vector # has no solution so will return a string of `NA` values. set_from_signvector(c(-1, 1, 1, -1, -1, -1, 0, 1), 4) #> [1] NA NA NA NA"},{"path":"https://satbq.github.io/musicMCT/reference/signed_interval_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordered pitch-class interval represented as interval class with sign — signed_interval_class","title":"Ordered pitch-class interval represented as interval class with sign — signed_interval_class","text":"Represents ordered interval two pitch-classes value -edo/2 edo/2, .e. absolute value matches interval class well sign (plus minus) disambiguates two OPCIs included interval-class. , C->D 2 whereas C->Bb -2. Exactly half octave represented positive value.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/signed_interval_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordered pitch-class interval represented as interval class with sign — signed_interval_class","text":"","code":"signed_interval_class(x, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/signed_interval_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordered pitch-class interval represented as interval class with sign — signed_interval_class","text":"x Single numeric value, representing ordered pitch-class interval edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/signed_interval_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordered pitch-class interval represented as interval class with sign — signed_interval_class","text":"Single numeric value","code":""},{"path":"https://satbq.github.io/musicMCT/reference/signed_interval_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ordered pitch-class interval represented as interval class with sign — signed_interval_class","text":"","code":"signed_interval_class(8) #> [1] -4 signed_interval_class(6) #> [1] 6 signed_interval_class(-6) #> [1] 6 signed_interval_class(3*pi) #> [1] -2.575222"},{"path":"https://satbq.github.io/musicMCT/reference/signvector.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect a scale's location relative to a hyperplane arrangement — signvector","title":"Detect a scale's location relative to a hyperplane arrangement — signvector","text":"\"Modal Color Theory\" describes (pp. 25-26), distinct scalar \"color\" determined relationships hyperplanes define space. scale, function calculates sign vector compares scale hyperplane returns vector summarizing results. scale lies hyperplane 1, first entry sign vector 0. lies hyperplane 2, second entry sign vector -1. lies hyperplane 3, third entry sign vector 1. Two scales identical sign vectors belong \"color\".","code":""},{"path":"https://satbq.github.io/musicMCT/reference/signvector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect a scale's location relative to a hyperplane arrangement — signvector","text":"","code":"signvector(set, ineqmat = NULL, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/signvector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect a scale's location relative to a hyperplane arrangement — signvector","text":"set Numeric vector pitch-classes set ineqmat Defaults NULL, case function assumes want use standard hyperplane arrangement MCT. can enter different matrix contains normal vectors hyperplane arrangement format standard ineqmats. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/signvector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect a scale's location relative to a hyperplane arrangement — signvector","text":"vector whose entries 0, -1, 1. Length vector equals number hyperplanes ineqmat.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/signvector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect a scale's location relative to a hyperplane arrangement — signvector","text":"","code":"# 037 and 016 have identical sign vectors because they belong to the same trichordal color signvector(c(0,3,7)) #> [1] -1 -1 -1 signvector(c(0,1,6)) #> [1] -1 -1 -1  # Just and equal-tempered diatonic scales have different sign vectors because they have  # different internal structures (e.g. 12edo dia is generated but just dia is not).  dia_12edo <- c(0, 2, 4, 5, 7, 9, 11) just_dia <- 12 * log2(c(1, 9/8, 5/4, 4/3, 3/2, 5/3, 15/8)) isTRUE( all.equal( signvector(dia_12edo), signvector(just_dia) ) ) #> [1] FALSE"},{"path":"https://satbq.github.io/musicMCT/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Scalar interval matrix — sim","title":"Scalar interval matrix — sim","text":"defined Tymoczko 2008 (\"Scale Theory, Serial Theory Voice Leading\") https://onlinelibrary.wiley.com/doi/10.1111/j.1468-2249.2008.00257.x, scalar interval matrix represents \"rotations\" set, transposed begin 0, columns. nth row represents specific intervals represent generic interval size n.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scalar interval matrix — sim","text":"","code":"sim(set, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scalar interval matrix — sim","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scalar interval matrix — sim","text":"Numeric n n matrix n number notes set","code":""},{"path":"https://satbq.github.io/musicMCT/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scalar interval matrix — sim","text":"","code":"diatonic_modes <- sim(c(0, 2, 4, 5, 7, 9, 11)) miyakobushi_modes <- sim(c(0, 1, 5, 7, 8)) # rows show trivalence"},{"path":"https://satbq.github.io/musicMCT/reference/step_signvector.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a scale's step pattern with a sign vector — step_signvector","title":"Specify a scale's step pattern with a sign vector — step_signvector","text":"Rather calculate full sign vector \"modal color\" hyperplane arrangement, sometimes advantageous use signvector reflects pairwise comparisons scale's steps. function .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/step_signvector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a scale's step pattern with a sign vector — step_signvector","text":"","code":"step_signvector(set, ineqmat = NULL, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/step_signvector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a scale's step pattern with a sign vector — step_signvector","text":"set Numeric vector pitch-classes set ineqmat Defaults NULL, case function assumes want use standard hyperplane arrangement MCT. can enter different matrix contains normal vectors hyperplane arrangement format standard ineqmats. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/step_signvector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a scale's step pattern with a sign vector — step_signvector","text":"vectors signs, -1, 0, 1, corresponding step-related hyperplanes defined ineqmat.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/step_signvector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a scale's step pattern with a sign vector — step_signvector","text":"","code":"step_signvector(sc(7,35)) # Half the length of a full sign vector for heptachords: #>  [1] -1 -1  0  0  1  1 -1  0  0 -1 -1  0  0 -1  0 -1  0  0 -1  0  0 signvector(sc(7,35)) #>  [1] -1 -1  0  0  1  1 -1  0  0 -1 -1  0  0 -1  0 -1  0  0 -1  0  0  0  0  1 -1 #> [26]  0 -1 -1  0 -1 -1  1  0  0  1  0 -1 -1  0  0  0  0"},{"path":"https://satbq.github.io/musicMCT/reference/subsetspectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset varieties for all subsets of a fixed size — subsetspectrum","title":"Subset varieties for all subsets of a fixed size — subsetspectrum","text":"Applies diatonicsubsets just particular subset shape possible subset shapes given fixed cardinality. example, finds specific varieties trichordal subsets major scale, just varities tonal triad. Comparable intervalspectrum subsets larger dyads. parameter simplify lets decide whether consider different \"inversions\" subset shape independently. instance, simplify=TRUE, root position triads (0,2,4) considered; simplify=FALSE, first inversion (0,2,5) second inversion (0,3,5) subset shapes also displayed.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/subsetspectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset varieties for all subsets of a fixed size — subsetspectrum","text":"","code":"subsetspectrum(   set,   subsetcard,   simplify = TRUE,   mode = \"tn\",   edo = 12,   rounder = 10 )"},{"path":"https://satbq.github.io/musicMCT/reference/subsetspectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset varieties for all subsets of a fixed size — subsetspectrum","text":"set scale find subsets , numeric vector subsetcard Single integer defining cardinality subsets consider simplify \"inversions\" subset ignored? Boolean, defaults TRUE mode String \"tn\" \"tni\". defining subset shapes, use transposition transposition & inversion reduce number shapes consider? Defaults \"tn\". edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/subsetspectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset varieties for all subsets of a fixed size — subsetspectrum","text":"list whose length matches number distinct subset shapes (given chosen options). entry list matrix displaying varieties particular subset type.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/subsetspectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset varieties for all subsets of a fixed size — subsetspectrum","text":"","code":"c_major_scale <- c(0,2,4,5,7,9,11) subsetspectrum(c_major_scale, 3) #> $`0, 1, 2` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    2    1 #> [3,]    4    3    3 #>  #> $`0, 1, 3` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    1    2 #> [3,]    5    5    6 #>  #> $`0, 1, 4` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    1    1 #> [3,]    7    7    6 #>  #> $`0, 2, 3` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    4    3    4 #> [3,]    5    5    6 #>  #> $`0, 2, 4` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    4    3    3 #> [3,]    7    7    6 #>  subsetspectrum(c_major_scale, 3, simplify=FALSE) #> $`0, 1, 2` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    2    1 #> [3,]    4    3    3 #>  #> $`0, 1, 3` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    1    2 #> [3,]    5    5    6 #>  #> $`0, 1, 4` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    1    1 #> [3,]    7    7    6 #>  #> $`0, 1, 5` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    1    2 #> [3,]    9    8    8 #>  #> $`0, 1, 6` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    2    1 #> [3,]   11   10   10 #>  #> $`0, 2, 3` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    4    3    4 #> [3,]    5    5    6 #>  #> $`0, 2, 4` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    4    3    3 #> [3,]    7    7    6 #>  #> $`0, 2, 5` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    4    3    3 #> [3,]    9    9    8 #>  #> $`0, 2, 6` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    4    3    4 #> [3,]   11   10   10 #>  #> $`0, 3, 4` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    5    6    5 #> [3,]    7    7    6 #>  #> $`0, 3, 5` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    5    5    6 #> [3,]    9    8    9 #>  #> $`0, 3, 6` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    5    5    6 #> [3,]   11   10   11 #>  #> $`0, 4, 5` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    7    7    6 #> [3,]    9    8    8 #>  #> $`0, 4, 6` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    7    7    6 #> [3,]   11   10   10 #>  #> $`0, 5, 6` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    9    9    8 #> [3,]   11   10   10 #>  subsetspectrum(c_major_scale, 3, mode=\"tni\") #> $`0, 1, 2` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    2    1 #> [3,]    4    3    3 #>  #> $`0, 1, 3` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    1    2 #> [3,]    5    5    6 #>  #> $`0, 1, 4` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    2    1    1 #> [3,]    7    7    6 #>  #> $`0, 2, 4` #>      [,1] [,2] [,3] #> [1,]    0    0    0 #> [2,]    4    3    3 #> [3,]    7    7    6 #>"},{"path":"https://satbq.github.io/musicMCT/reference/surround_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Random scales uniformly distributed on a hypersphere around an input — surround_set","title":"Random scales uniformly distributed on a hypersphere around an input — surround_set","text":"Sometimes want explore scale structures given scale close . can done studying network color adjacencies suitably low cardinalities (see \"Modal Color Theory,\" 31-37), can also rewarding simply randomly sample scales suitably close one started . larger starting scale, complicated geometry color space lives . Therefore function generates larger number random scales larger cardinalities: default, length input set card, surround_set gives card * 100 output scales. parameter magnitude controls order magnitude sample (.e. want ~1000 scales rather ~100, set magnitude=3). size hypersphere function samples , default, 1. working unit 12 semitones per octave, 1 semitone voice leading work can get pretty far away original set, especially higher cardinalities. (instance, C major C melodic minor just 1 semitone motion, 3 colors intervene two scales along direct path.) Depending goals, might want try couple different orders magnitude distance.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/surround_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random scales uniformly distributed on a hypersphere around an input — surround_set","text":"","code":"surround_set(set, magnitude = 2, distance = 1)"},{"path":"https://satbq.github.io/musicMCT/reference/surround_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random scales uniformly distributed on a hypersphere around an input — surround_set","text":"set Numeric vector pitch-classes set magnitude Numeric value specifying many sets return. Defaults 2. distance far (units voice leading work, using Euclidean metric) sampled scales input set?","code":""},{"path":"https://satbq.github.io/musicMCT/reference/surround_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random scales uniformly distributed on a hypersphere around an input — surround_set","text":"Matrix length(set) rows 10^magnitude columns, representing 10^magnitude different scales","code":""},{"path":"https://satbq.github.io/musicMCT/reference/surround_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random scales uniformly distributed on a hypersphere around an input — surround_set","text":"","code":"# First we sample 30 trichords surrounding the minor triad 037. chords_near_minor <- surround_set(c(0,3,7), magnitude=1, distance=.5) chords_near_minor #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8] #> [1,] 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 #> [2,] 2.508112 2.500001 3.237992 2.504545 2.673156 2.669620 3.392376 3.132602 #> [3,] 7.089702 6.998857 7.439727 6.932738 6.621618 7.375299 6.690095 6.517904 #>          [,9]    [,10]    [,11]    [,12]    [,13]    [,14]    [,15]    [,16] #> [1,] 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 #> [2,] 2.502519 3.255361 3.395154 2.564779 3.499336 2.500073 2.760162 3.491330 #> [3,] 6.949870 6.570127 7.306355 7.246136 6.974235 6.991479 6.561277 7.092706 #>         [,17]    [,18]    [,19]    [,20]    [,21]    [,22]    [,23]    [,24] #> [1,] 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 #> [2,] 3.074216 3.320723 2.505259 2.859111 3.054464 2.902564 3.079682 3.040142 #> [3,] 7.494461 6.616416 6.927673 7.479740 6.502975 6.509586 7.493610 7.498386 #>         [,25]    [,26]    [,27]    [,28]    [,29]    [,30] #> [1,] 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 #> [2,] 3.030854 3.481213 2.502151 3.026843 2.676676 2.569488 #> [3,] 6.500953 6.864226 7.046328 7.499279 7.381394 7.254282  # The next two commands will plot the sampled trichords on an x-y plane as # circles; the minor triad that they surround is marked with a \"+\" sign. plot(chords_near_minor[2,], chords_near_minor[3,],xlab=\"Third\",ylab=\"Fifth\") points(3,7,pch=\"+\")  # The following two commands will plot the two lines (i.e. hyperplanes) that # demarcate the boundaries of the minor triad's color. Most but not all # of our randomly generated points should fall in the space between the  # two lines, in the same region as the \"+\" representing 037. abline(0,2) abline(6,1/2)"},{"path":"https://satbq.github.io/musicMCT/reference/svzero_fingerprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Distinguish different types of interval equalities — svzero_fingerprint","title":"Distinguish different types of interval equalities — svzero_fingerprint","text":"hyperplanes made equal. represent \"formal tritone\" comparisons \"exceptional\" check scale degree twice (\"Modal Color Theory,\" 40-41) play different role structure hyperplane arrangement rest. function returns \"fingerprint\" scale like countsvzeroes() counts different types hyperplane separately.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/svzero_fingerprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distinguish different types of interval equalities — svzero_fingerprint","text":"","code":"svzero_fingerprint(set, ineqmat = NULL, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/svzero_fingerprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distinguish different types of interval equalities — svzero_fingerprint","text":"set Numeric vector pitch-classes set ineqmat Defaults NULL, case function assumes want use standard hyperplane arrangement MCT. can enter different matrix contains normal vectors hyperplane arrangement format standard ineqmats. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/svzero_fingerprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distinguish different types of interval equalities — svzero_fingerprint","text":"Numeric vector 3 entries: number 'normal' hyerplanes set lies , number 'exceptional' hyperplanes, number hyperplanes compare formal tritone .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/svzero_fingerprint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distinguish different types of interval equalities — svzero_fingerprint","text":"","code":"# Two hexachords on the same number of hyperplanes but with different fingerprints hex1 <- c(0,1,3,5,8,9) hex2 <- c(0,1,3,5,6,9) countsvzeroes(hex1) == countsvzeroes(hex2) #> [1] TRUE svzero_fingerprint(hex1) #> [1] 3 4 1 svzero_fingerprint(hex2) #> [1] 1 6 1 # Compare brightnessgraph(hex1) and brightnessgraph(hex2)"},{"path":"https://satbq.github.io/musicMCT/reference/tn.html","id":null,"dir":"Reference","previous_headings":"","what":"Transposition and Inversion — tn","title":"Transposition and Inversion — tn","text":"Calculate classic operations pitch-class sets \\(T_n\\) \\(T_n \\). , tn adds constant elements set modulo octave, tni essentially multiplies set -1 (modulo octave) adds constant (modulo octave). sorted TRUE (default), resulting set listed ascending order, sometimes can useful track transformational voice leadings, case set sorted FALSE. startzero transposes set first element 0. (Note different tnprime attempt find compact form set. See examples contrast.) Sometimes just want invert set care index . charm quick way , giving name transposition-class \\(T_0 \\) set. (name charm reference \"strange\" \"charm\" quarks particle physics: like names \"\" \"b\" forms set class, .e. strange common triad 3-11a = (0, 3, 7) charm common triad 3-11b = (0, 4, 7). name function charm means input strange set, get charm set, NB also vice versa.)","code":""},{"path":"https://satbq.github.io/musicMCT/reference/tn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transposition and Inversion — tn","text":"","code":"tn(set, n, edo = 12, sorted = TRUE)  tni(set, n, edo = 12, sorted = TRUE)  startzero(set, edo = 12, sorted = TRUE)  charm(set, edo = 12, sorted = TRUE)"},{"path":"https://satbq.github.io/musicMCT/reference/tn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transposition and Inversion — tn","text":"set Numeric vector pitch-classes set n Numeric value (necessarily integer!) representing index transposition inversion. edo Number unit steps octave. Defaults 12. sorted want result ascending order? Boolean, defaults TRUE.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/tn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transposition and Inversion — tn","text":"Numeric vector length set","code":""},{"path":"https://satbq.github.io/musicMCT/reference/tn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transposition and Inversion — tn","text":"","code":"c_major <- c(0, 4, 7) tn(c_major, 2) #> [1] 2 6 9 tn(c_major, -10) #> [1] 2 6 9 tni(c_major, 7) #> [1] 0 3 7 tni(c_major, 7, sorted=FALSE) #> [1] 7 3 0 tn(c(0, 1, 6, 7), 6) #> [1] 0 1 6 7 tn(c(0, 1, 6, 7), 6, sorted=FALSE) #> [1] 6 7 0 1  ##### Difference between startzero and tnprime e_maj7 <- c(4, 8, 11, 3) startzero(e_maj7) #> [1]  0  4  7 11 tnprime(e_maj7) #> [1] 0 1 5 8 isTRUE(all.equal(tnprime(e_maj7), charm(e_maj7))) # True because inversionally symmetrical #> [1] TRUE  ##### Derive minimal voice leading from ionian to lydian ionian <- c(0, 2, 4, 5, 7, 9, 11) lydian <- rotate(tn(ionian, 7, sorted=FALSE), 3) lydian - ionian #> [1] 0 0 0 1 0 0 0"},{"path":"https://satbq.github.io/musicMCT/reference/tnprime.html","id":null,"dir":"Reference","previous_headings":"","what":"Transposition class of a given pc-set — tnprime","title":"Transposition class of a given pc-set — tnprime","text":"Uses Rahn's algorithm calculate best normal order transposition class represented given set. Reflects transpositional inversional equivalence, .e. major triads return (0,4,7) minor triads return (0,3,7).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/tnprime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transposition class of a given pc-set — tnprime","text":"","code":"tnprime(set, edo = 12)"},{"path":"https://satbq.github.io/musicMCT/reference/tnprime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transposition class of a given pc-set — tnprime","text":"set Numeric vector pitch-classes set edo Number unit steps octave. Defaults 12.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/tnprime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transposition class of a given pc-set — tnprime","text":"Numeric vector length set representing set's Tn-prime form","code":""},{"path":"https://satbq.github.io/musicMCT/reference/tnprime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transposition class of a given pc-set — tnprime","text":"","code":"tnprime(c(2,6,9)) #> [1] 0 4 7 tnprime(c(0,3,6,9,14),edo=16) #> [1]  0  2  5  8 11"},{"path":"https://satbq.github.io/musicMCT/reference/whichsvzeroes.html","id":null,"dir":"Reference","previous_headings":"","what":"Which interval-comparison equalities does a scale satisfy? — whichsvzeroes","title":"Which interval-comparison equalities does a scale satisfy? — whichsvzeroes","text":"\"Modal Color Theory\" (p. 26) describes, one useful measure scale's regularity number zeroes signvector. indicates many hyperplanes scale lies , geometrical fact whose musical interpretation , roughly speaking, many times two generic intervals equal specific size. (say \"roughly speaking\" one hyperplane usually represents multiple comparisons: see Appendix 1.1.) Scales great degree symmetry forms regularity well-formedness tend high number hyperplanes compared sets given cardinality. musicMCT offers two convenience functions return pertinent information signvector(). countsvzeroes returns count number sign-vector zeroes, whichsvzeroes gives list specific hyperplanes scale lines (numbered according position given ineqmat). specific information whichsvzeroes can useful determines \"flat\" hyperplane arrangement scale lies , general kind scalar structure color (determined entire sign vector).","code":""},{"path":"https://satbq.github.io/musicMCT/reference/whichsvzeroes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which interval-comparison equalities does a scale satisfy? — whichsvzeroes","text":"","code":"whichsvzeroes(set, ineqmat = NULL, edo = 12, rounder = 10)  countsvzeroes(set, ineqmat = NULL, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/whichsvzeroes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which interval-comparison equalities does a scale satisfy? — whichsvzeroes","text":"set Numeric vector pitch-classes set ineqmat Defaults NULL, case function assumes want use standard hyperplane arrangement MCT. can enter different matrix contains normal vectors hyperplane arrangement format standard ineqmats. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/whichsvzeroes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Which interval-comparison equalities does a scale satisfy? — whichsvzeroes","text":"Single numeric value countsvzeroes numeric vector whichsvzeroes","code":""},{"path":"https://satbq.github.io/musicMCT/reference/whichsvzeroes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Which interval-comparison equalities does a scale satisfy? — whichsvzeroes","text":"","code":"# Sort 12edo heptachords by how many sign vector zeroes they have (from high to low) heptas12 <- unique(apply(utils::combn(12,7),2,primeform),MARGIN=2) heptas12_svzeroes <- apply(heptas12, 2, countsvzeroes) colnames(heptas12) <- apply(heptas12, 2, fortenum) heptas12[,order(heptas12_svzeroes, decreasing=TRUE)] #>      7-1 7-35 7-34 7-33 7-32 7-2 7-3 7-30 7-5 7-7 7-37 7-22 7-31 7-4 7-6 7-13 #> [1,]   0    0    0    0    0   0   0    0   0   0    0    0    0   0   0    0 #> [2,]   1    1    1    1    1   1   1    1   1   1    1    1    1   1   1    1 #> [3,]   2    3    3    2    3   2   2    2   2   2    3    2    3   2   2    2 #> [4,]   3    5    4    4    4   3   3    4   3   3    4    5    4   3   3    4 #> [5,]   4    6    6    6    6   4   4    6   5   6    5    6    6   4   4    5 #> [6,]   5    8    8    8    8   5   5    8   6   7    7    8    7   6   7    6 #> [7,]   6   10   10   10    9   7   8    9   7   8    8    9    9   7   8    8 #>      7-38 7-21 7-29 7-20 7-8 7-12 7-11 7-19 7-17 7-27 7-25 7-15 7-28 7-24 7-26 #> [1,]    0    0    0    0   0    0    0    0    0    0    0    0    0    0    0 #> [2,]    1    1    1    1   2    1    1    1    1    1    2    1    1    1    1 #> [3,]    2    2    2    2   3    2    3    2    2    2    3    2    3    2    3 #> [4,]    4    4    4    5   4    3    4    3    4    4    4    4    5    3    4 #> [5,]    5    5    6    6   5    4    5    6    5    5    6    6    6    5    5 #> [6,]    7    8    7    7   6    7    6    7    6    7    7    7    7    7    7 #> [7,]    8    9    9    9   8    9    8    9    9    9    9    8    9    9    9 #>      7-9 7-10 7-36 7-16 7-14 7-18 7-23 #> [1,]   0    0    0    0    0    0    0 #> [2,]   1    1    1    1    1    1    2 #> [3,]   2    2    2    2    2    4    3 #> [4,]   3    3    3    3    3    5    4 #> [5,]   4    4    5    5    5    6    5 #> [6,]   6    6    6    6    7    7    7 #> [7,]   8    9    8    9    8    9    9  # Multiple hexachords on the same flat but of different colors hex1 <- c(0,2,4,5,7,9) hex2 <- convert(c(0,1,2,4,5,6),9,12) hex3 <- convert(c(0,3,6,8,11,14),15,12) hex_words <- rbind(asword(hex1), asword(hex2), asword(hex3)) rownames(hex_words) <- c(\"hex1\", \"hex2\", \"hex3\") c(colornum(hex1), colornum(hex2), colornum(hex3)) #> NULL whichsvzeroes(hex1) #> [1]  1  4  5  7  8 10 17 whichsvzeroes(hex2) #> [1]  1  4  5  7  8 10 17 whichsvzeroes(hex3) #> [1]  1  4  5  7  8 10 17 hex_words #>      [,1] [,2] [,3] [,4] [,5] [,6] #> hex1    2    2    1    2    2    3 #> hex2    1    1    2    1    1    3 #> hex3    3    3    2    3    3    1"},{"path":"https://satbq.github.io/musicMCT/reference/writeSCL.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Scala tuning file from a given scale — writeSCL","title":"Create a Scala tuning file from a given scale — writeSCL","text":"mean want play around R forever? function lets export scale defined R .scl tuning file use Scala synth can read .scl files. write working directory. addition saving necessary tuning data, function attempt add comments extra information can derived MCT functions, like color number, degrees freedom, number sign-vector zeroes, etc.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/writeSCL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Scala tuning file from a given scale — writeSCL","text":"","code":"writeSCL(x, filename, period = 2, ineqmat = NULL, edo = 12, rounder = 10)"},{"path":"https://satbq.github.io/musicMCT/reference/writeSCL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Scala tuning file from a given scale — writeSCL","text":"x Numeric vector: scale export filename String (quotation marks): name Scala file. Defaults using name x file name enter nothing. period frequency ratio scale repeats; defaults 2 indicates octave-repeating scale. ineqmat Defaults NULL, case function assumes want use standard hyperplane arrangement MCT. can enter different matrix contains normal vectors hyperplane arrangement format standard ineqmats. edo Number unit steps octave. Defaults 12. rounder Numeric (expected integer) representing tolerance: number decimal places round .","code":""},{"path":"https://satbq.github.io/musicMCT/reference/writeSCL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Scala tuning file from a given scale — writeSCL","text":"Invisible NULL","code":""},{"path":"https://satbq.github.io/musicMCT/reference/writeSCL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Scala tuning file from a given scale — writeSCL","text":"","code":"neat_pentachord <- convert(c(0,1,4,9,11),15,12) if (FALSE) { # \\dontrun{   writeSCL(neat_pentachord, \"neat_pentachord.scl\") } # }"},{"path":"https://satbq.github.io/musicMCT/reference/zmate.html","id":null,"dir":"Reference","previous_headings":"","what":"Twin set in the Z-relation (Z mate) — zmate","title":"Twin set in the Z-relation (Z mate) — zmate","text":"standard 12edo sets Fortean pitch-class set theory, given one pitch-class set, find set class whose interval-class vector input set include input set. set classes participate Z-relation, case function returns NA.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/zmate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Twin set in the Z-relation (Z mate) — zmate","text":"","code":"zmate(set)"},{"path":"https://satbq.github.io/musicMCT/reference/zmate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Twin set in the Z-relation (Z mate) — zmate","text":"set Numeric vector pitch-classes set","code":""},{"path":"https://satbq.github.io/musicMCT/reference/zmate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Twin set in the Z-relation (Z mate) — zmate","text":"NA numeric vector length set","code":""},{"path":"https://satbq.github.io/musicMCT/reference/zmate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Twin set in the Z-relation (Z mate) — zmate","text":"values hard-coded Forte's list work subsets standard chromatic scale. zmate even give option work different edo. , see better solution calculating set classes given cardinality spot, can slow higher edos.","code":""},{"path":"https://satbq.github.io/musicMCT/reference/zmate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Twin set in the Z-relation (Z mate) — zmate","text":"","code":"zmate(c(0,4,7)) #> [1] NA zmate(c(0,1,4,6)) #> [1] 0 1 3 7"}]
